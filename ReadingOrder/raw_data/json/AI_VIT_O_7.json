{
  "id": "62a2374a-0f92-11ef-8230-426932df3dcf",
  "pdf_path": "./pdf/AI_VIT_O/1512.03385v1.pdf",
  "elements": [
    {
      "bounding_box": [
        {
          "x": 631,
          "y": 439
        },
        {
          "x": 1844,
          "y": 439
        },
        {
          "x": 1844,
          "y": 506
        },
        {
          "x": 631,
          "y": 506
        }
      ],
      "category": "paragraph",
      "html": "<p id='0' style='font-size:22px'>Deep Residual Learning for Image Recognition</p>",
      "id": 0,
      "page": 1,
      "text": "Deep Residual Learning for Image Recognition"
    },
    {
      "bounding_box": [
        {
          "x": 565,
          "y": 630
        },
        {
          "x": 1912,
          "y": 630
        },
        {
          "x": 1912,
          "y": 816
        },
        {
          "x": 565,
          "y": 816
        }
      ],
      "category": "paragraph",
      "html": "<p id='1' style='font-size:22px'>Kaiming He Xiangyu Zhang Shaoqing Ren Jian Sun<br>Microsoft Research<br>{kahe, v-xiangz, v-shren, jiansun} @microsoft.com</p>",
      "id": 1,
      "page": 1,
      "text": "Kaiming He Xiangyu Zhang Shaoqing Ren Jian Sun\nMicrosoft Research\n{kahe, v-xiangz, v-shren, jiansun} @microsoft.com"
    },
    {
      "bounding_box": [
        {
          "x": 604,
          "y": 938
        },
        {
          "x": 797,
          "y": 938
        },
        {
          "x": 797,
          "y": 987
        },
        {
          "x": 604,
          "y": 987
        }
      ],
      "category": "paragraph",
      "html": "<p id='2' style='font-size:22px'>Abstract</p>",
      "id": 2,
      "page": 1,
      "text": "Abstract"
    },
    {
      "bounding_box": [
        {
          "x": 199,
          "y": 1021
        },
        {
          "x": 1199,
          "y": 1021
        },
        {
          "x": 1199,
          "y": 1766
        },
        {
          "x": 199,
          "y": 1766
        }
      ],
      "category": "paragraph",
      "html": "<p id='3' style='font-size:18px'>Deeper neural networks are more difficult to train. We<br>present a residual learning framework to ease the training<br>of networks that are substantially deeper than those used<br>previously. We explicitly reformulate the layers as learn-<br>ing residual functions with reference to the layer inputs, in-<br>stead of learning unreferenced functions. We provide com-<br>prehensive empirical evidence showing that these residual<br>networks are easier to optimize, and can gain accuracy from<br>considerably increased depth. On the ImageNet dataset we<br>evaluate residual nets with a depth of up to 152 layers-8x<br>deeper than VGG nets [41] but still having lower complex-<br>ity. An ensemble of these residual nets achieves 3.57% error<br>on the ImageNet test set. This result won the 1st place on the<br>ILSVRC 2015 classification task. We also present analysis<br>on CIFAR-10 with 100 and 1000 layers.</p>",
      "id": 3,
      "page": 1,
      "text": "Deeper neural networks are more difficult to train. We\npresent a residual learning framework to ease the training\nof networks that are substantially deeper than those used\npreviously. We explicitly reformulate the layers as learn-\ning residual functions with reference to the layer inputs, in-\nstead of learning unreferenced functions. We provide com-\nprehensive empirical evidence showing that these residual\nnetworks are easier to optimize, and can gain accuracy from\nconsiderably increased depth. On the ImageNet dataset we\nevaluate residual nets with a depth of up to 152 layers-8x\ndeeper than VGG nets [41] but still having lower complex-\nity. An ensemble of these residual nets achieves 3.57% error\non the ImageNet test set. This result won the 1st place on the\nILSVRC 2015 classification task. We also present analysis\non CIFAR-10 with 100 and 1000 layers."
    },
    {
      "bounding_box": [
        {
          "x": 201,
          "y": 1773
        },
        {
          "x": 1200,
          "y": 1773
        },
        {
          "x": 1200,
          "y": 2168
        },
        {
          "x": 201,
          "y": 2168
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='4' style='font-size:18px'>The depth of representations is of central importance<br>for many visual recognition tasks. Solely due to our ex-<br>tremely deep representations, we obtain a 28% relative im-<br>provement on the COCO object detection dataset. Deep<br>residual nets are foundations of our submissions to ILSVRC<br>& COCO 2015 competitions1 , where we also won the 1st<br>places on the tasks of ImageNet detection, ImageNet local-<br>ization, COCO detection, and COCO segmentation.</p>",
      "id": 4,
      "page": 1,
      "text": "The depth of representations is of central importance\nfor many visual recognition tasks. Solely due to our ex-\ntremely deep representations, we obtain a 28% relative im-\nprovement on the COCO object detection dataset. Deep\nresidual nets are foundations of our submissions to ILSVRC\n& COCO 2015 competitions1 , where we also won the 1st\nplaces on the tasks of ImageNet detection, ImageNet local-\nization, COCO detection, and COCO segmentation."
    },
    {
      "bounding_box": [
        {
          "x": 205,
          "y": 2228
        },
        {
          "x": 531,
          "y": 2228
        },
        {
          "x": 531,
          "y": 2278
        },
        {
          "x": 205,
          "y": 2278
        }
      ],
      "category": "paragraph",
      "html": "<p id='5' style='font-size:20px'>1. Introduction</p>",
      "id": 5,
      "page": 1,
      "text": "1. Introduction"
    },
    {
      "bounding_box": [
        {
          "x": 201,
          "y": 2312
        },
        {
          "x": 1199,
          "y": 2312
        },
        {
          "x": 1199,
          "y": 2861
        },
        {
          "x": 201,
          "y": 2861
        }
      ],
      "category": "paragraph",
      "html": "<p id='6' style='font-size:20px'>Deep convolutional neural networks [22, 21] have led<br>to a series of breakthroughs for image classification [21,<br>50, 40]. Deep networks naturally integrate low/mid/high-<br>level features [50] and classifiers in an end-to-end multi-<br>layer fashion, and the \"levels\" of features can be enriched<br>by the number of stacked layers (depth). Recent evidence<br>[41, 44] reveals that network depth is of crucial importance,<br>and the leading results [41, 44, 13, 16] on the challenging<br>ImageNet dataset [36] all exploit \"very deep\" [41] models,<br>with a depth of sixteen [41] to thirty [16]. Many other non-<br>trivial visual recognition tasks [8, 12, 7, 32, 27] have also</p>",
      "id": 6,
      "page": 1,
      "text": "Deep convolutional neural networks [22, 21] have led\nto a series of breakthroughs for image classification [21,\n50, 40]. Deep networks naturally integrate low/mid/high-\nlevel features [50] and classifiers in an end-to-end multi-\nlayer fashion, and the \"levels\" of features can be enriched\nby the number of stacked layers (depth). Recent evidence\n[41, 44] reveals that network depth is of crucial importance,\nand the leading results [41, 44, 13, 16] on the challenging\nImageNet dataset [36] all exploit \"very deep\" [41] models,\nwith a depth of sixteen [41] to thirty [16]. Many other non-\ntrivial visual recognition tasks [8, 12, 7, 32, 27] have also"
    },
    {
      "bounding_box": [
        {
          "x": 201,
          "y": 2902
        },
        {
          "x": 1197,
          "y": 2902
        },
        {
          "x": 1197,
          "y": 2972
        },
        {
          "x": 201,
          "y": 2972
        }
      ],
      "category": "paragraph",
      "html": "<p id='7' style='font-size:14px'>1http : / / image-net · org/ challenges/1SVRC/2015/ and<br>http: / /mscoco. org/datased/#detections-thallenge2015.</p>",
      "id": 7,
      "page": 1,
      "text": "1http : / / image-net · org/ challenges/1SVRC/2015/ and\nhttp: / /mscoco. org/datased/#detections-thallenge2015."
    },
    {
      "bounding_box": [
        {
          "x": 1278,
          "y": 924
        },
        {
          "x": 2277,
          "y": 924
        },
        {
          "x": 2277,
          "y": 1265
        },
        {
          "x": 1278,
          "y": 1265
        }
      ],
      "category": "figure",
      "html": "<br><figure><img id='8' style='font-size:14px' alt=\"20 20\n56-layer\n(%)\nerror\n20-layer\n10\ntraining\n56-layer error\ntest\n20-layer\n00 2 5\n0 1 2 5\niter. (1e4) iter. (1e4)\" data-coord=\"top-left:(1278,924); bottom-right:(2277,1265)\" /></figure>",
      "id": 8,
      "page": 1,
      "text": "20 20\n56-layer\n(%)\nerror\n20-layer\n10\ntraining\n56-layer error\ntest\n20-layer\n00 2 5\n0 1 2 5\niter. (1e4) iter. (1e4)"
    },
    {
      "bounding_box": [
        {
          "x": 1281,
          "y": 1267
        },
        {
          "x": 2277,
          "y": 1267
        },
        {
          "x": 2277,
          "y": 1450
        },
        {
          "x": 1281,
          "y": 1450
        }
      ],
      "category": "caption",
      "html": "<br><caption id='9' style='font-size:16px'>Figure 1. Training error (left) and test error (right) on CIFAR-10<br>with 20-layer and 56-layer \"plain\" networks. The deeper network<br>has higher training error, and thus test error. Similar phenomena<br>on ImageNet is presented in Fig. 4.</caption>",
      "id": 9,
      "page": 1,
      "text": "Figure 1. Training error (left) and test error (right) on CIFAR-10\nwith 20-layer and 56-layer \"plain\" networks. The deeper network\nhas higher training error, and thus test error. Similar phenomena\non ImageNet is presented in Fig. 4."
    },
    {
      "bounding_box": [
        {
          "x": 1281,
          "y": 1511
        },
        {
          "x": 1970,
          "y": 1511
        },
        {
          "x": 1970,
          "y": 1555
        },
        {
          "x": 1281,
          "y": 1555
        }
      ],
      "category": "paragraph",
      "html": "<p id='10' style='font-size:20px'>greatly benefited from very deep models.</p>",
      "id": 10,
      "page": 1,
      "text": "greatly benefited from very deep models."
    },
    {
      "bounding_box": [
        {
          "x": 1281,
          "y": 1567
        },
        {
          "x": 2275,
          "y": 1567
        },
        {
          "x": 2275,
          "y": 2062
        },
        {
          "x": 1281,
          "y": 2062
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='11' style='font-size:20px'>Driven by the significance of depth, a question arises: Is<br>learning better networks as easy as stacking more layers?<br>An obstacle to answering this question was the notorious<br>problem of vanishing/exploding gradients [1, 9], which<br>hamper convergence from the beginning. This problem,<br>however, has been largely addressed by normalized initial-<br>ization [23, 9, 37, 13] and intermediate normalization layers<br>[16], which enable networks with tens of layers to start con-<br>verging for stochastic gradient descent (SGD) with back-<br>propagation [22].</p>",
      "id": 11,
      "page": 1,
      "text": "Driven by the significance of depth, a question arises: Is\nlearning better networks as easy as stacking more layers?\nAn obstacle to answering this question was the notorious\nproblem of vanishing/exploding gradients [1, 9], which\nhamper convergence from the beginning. This problem,\nhowever, has been largely addressed by normalized initial-\nization [23, 9, 37, 13] and intermediate normalization layers\n[16], which enable networks with tens of layers to start con-\nverging for stochastic gradient descent (SGD) with back-\npropagation [22]."
    },
    {
      "bounding_box": [
        {
          "x": 1280,
          "y": 2072
        },
        {
          "x": 2276,
          "y": 2072
        },
        {
          "x": 2276,
          "y": 2468
        },
        {
          "x": 1280,
          "y": 2468
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='12' style='font-size:20px'>When deeper networks are able to start converging, a<br>degradation problem has been exposed: with the network<br>depth increasing, accuracy gets saturated (which might be<br>unsurprising) and then degrades rapidly. Unexpectedly,<br>such degradation is not caused by overfitting, and adding<br>more layers to a suitably deep model leads to higher train-<br>ing error, as reported in [11, 42] and thoroughly verified by<br>our experiments. Fig. 1 shows a typical example.</p>",
      "id": 12,
      "page": 1,
      "text": "When deeper networks are able to start converging, a\ndegradation problem has been exposed: with the network\ndepth increasing, accuracy gets saturated (which might be\nunsurprising) and then degrades rapidly. Unexpectedly,\nsuch degradation is not caused by overfitting, and adding\nmore layers to a suitably deep model leads to higher train-\ning error, as reported in [11, 42] and thoroughly verified by\nour experiments. Fig. 1 shows a typical example."
    },
    {
      "bounding_box": [
        {
          "x": 1281,
          "y": 2479
        },
        {
          "x": 2276,
          "y": 2479
        },
        {
          "x": 2276,
          "y": 2976
        },
        {
          "x": 1281,
          "y": 2976
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='13' style='font-size:18px'>The degradation (of training accuracy) indicates that not<br>all systems are similarly easy to optimize. Let us consider a<br>shallower architecture and its deeper counterpart that adds<br>more layers onto it. There exists a solution by construction<br>to the deeper model: the added layers are identity mapping,<br>and the other layers are copied from the learned shallower<br>model. The existence of this constructed solution indicates<br>that a deeper model should produce no higher training error<br>than its shallower counterpart. But experiments show that<br>our current solvers on hand are unable to find solutions that</p>",
      "id": 13,
      "page": 1,
      "text": "The degradation (of training accuracy) indicates that not\nall systems are similarly easy to optimize. Let us consider a\nshallower architecture and its deeper counterpart that adds\nmore layers onto it. There exists a solution by construction\nto the deeper model: the added layers are identity mapping,\nand the other layers are copied from the learned shallower\nmodel. The existence of this constructed solution indicates\nthat a deeper model should produce no higher training error\nthan its shallower counterpart. But experiments show that\nour current solvers on hand are unable to find solutions that"
    },
    {
      "bounding_box": [
        {
          "x": 59,
          "y": 863
        },
        {
          "x": 149,
          "y": 863
        },
        {
          "x": 149,
          "y": 2324
        },
        {
          "x": 59,
          "y": 2324
        }
      ],
      "category": "footer",
      "html": "<br><footer id='14' style='font-size:14px'>2015<br>Dec<br>10<br>[cs.CV]<br>arXiv:1512.03385v1</footer>",
      "id": 14,
      "page": 1,
      "text": "2015\nDec\n10\n[cs.CV]\narXiv:1512.03385v1"
    },
    {
      "bounding_box": [
        {
          "x": 1225,
          "y": 3057
        },
        {
          "x": 1251,
          "y": 3057
        },
        {
          "x": 1251,
          "y": 3092
        },
        {
          "x": 1225,
          "y": 3092
        }
      ],
      "category": "footer",
      "html": "<footer id='15' style='font-size:16px'>1</footer>",
      "id": 15,
      "page": 1,
      "text": "1"
    },
    {
      "bounding_box": [
        {
          "x": 394,
          "y": 317
        },
        {
          "x": 976,
          "y": 317
        },
        {
          "x": 976,
          "y": 646
        },
        {
          "x": 394,
          "y": 646
        }
      ],
      "category": "figure",
      "html": "<figure><img id='16' style='font-size:14px' alt=\"x\nweight layer\nF(x) relu\nx\nweight layer\nidentity\nF(x) + x\nrelu\" data-coord=\"top-left:(394,317); bottom-right:(976,646)\" /></figure>",
      "id": 16,
      "page": 2,
      "text": "x\nweight layer\nF(x) relu\nx\nweight layer\nidentity\nF(x) + x\nrelu"
    },
    {
      "bounding_box": [
        {
          "x": 354,
          "y": 657
        },
        {
          "x": 1041,
          "y": 657
        },
        {
          "x": 1041,
          "y": 698
        },
        {
          "x": 354,
          "y": 698
        }
      ],
      "category": "caption",
      "html": "<br><caption id='17' style='font-size:14px'>Figure 2. Residual learning: a building block.</caption>",
      "id": 17,
      "page": 2,
      "text": "Figure 2. Residual learning: a building block."
    },
    {
      "bounding_box": [
        {
          "x": 203,
          "y": 759
        },
        {
          "x": 1196,
          "y": 759
        },
        {
          "x": 1196,
          "y": 849
        },
        {
          "x": 203,
          "y": 849
        }
      ],
      "category": "paragraph",
      "html": "<p id='18' style='font-size:14px'>are comparably good or better than the constructed solution<br>(or unable to do SO in feasible time).</p>",
      "id": 18,
      "page": 2,
      "text": "are comparably good or better than the constructed solution\n(or unable to do SO in feasible time)."
    },
    {
      "bounding_box": [
        {
          "x": 201,
          "y": 863
        },
        {
          "x": 1198,
          "y": 863
        },
        {
          "x": 1198,
          "y": 1505
        },
        {
          "x": 201,
          "y": 1505
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='19' style='font-size:18px'>In this paper, we address the degradation problem by<br>introducing a deep residual learning framework. In-<br>stead of hoping each few stacked layers directly fit a<br>desired underlying mapping, we explicitly let these lay-<br>ers fit a residual mapping. Formally, denoting the desired<br>underlying mapping as H(x), we let the stacked nonlinear<br>layers fit another mapping of F(x) := H(x) - X. The orig-<br>inal mapping is recast into F(x) +x. We hypothesize that it<br>is easier to optimize the residual mapping than to optimize<br>the original, unreferenced mapping. To the extreme, if an<br>identity mapping were optimal, it would be easier to push<br>the residual to zero than to fit an identity mapping by a stack<br>of nonlinear layers.</p>",
      "id": 19,
      "page": 2,
      "text": "In this paper, we address the degradation problem by\nintroducing a deep residual learning framework. In-\nstead of hoping each few stacked layers directly fit a\ndesired underlying mapping, we explicitly let these lay-\ners fit a residual mapping. Formally, denoting the desired\nunderlying mapping as H(x), we let the stacked nonlinear\nlayers fit another mapping of F(x) := H(x) - X. The orig-\ninal mapping is recast into F(x) +x. We hypothesize that it\nis easier to optimize the residual mapping than to optimize\nthe original, unreferenced mapping. To the extreme, if an\nidentity mapping were optimal, it would be easier to push\nthe residual to zero than to fit an identity mapping by a stack\nof nonlinear layers."
    },
    {
      "bounding_box": [
        {
          "x": 201,
          "y": 1516
        },
        {
          "x": 1197,
          "y": 1516
        },
        {
          "x": 1197,
          "y": 2058
        },
        {
          "x": 201,
          "y": 2058
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='20' style='font-size:18px'>The formulation of F(x) + x can be realized by feedfor-<br>ward neural networks with \"shortcut connections\" (Fig. 2).<br>Shortcut connections [2, 34, 49] are those skipping one or<br>more layers. In our case, the shortcut connections simply<br>perform identity mapping, and their outputs are added to<br>the outputs of the stacked layers (Fig. 2). Identity short-<br>cut connections add neither extra parameter nor computa-<br>tional complexity. The entire network can still be trained<br>end-to-end by SGD with backpropagation, and can be eas-<br>ily implemented using common libraries (e.g., Caffe [19])<br>without modifying the solvers.</p>",
      "id": 20,
      "page": 2,
      "text": "The formulation of F(x) + x can be realized by feedfor-\nward neural networks with \"shortcut connections\" (Fig. 2).\nShortcut connections [2, 34, 49] are those skipping one or\nmore layers. In our case, the shortcut connections simply\nperform identity mapping, and their outputs are added to\nthe outputs of the stacked layers (Fig. 2). Identity short-\ncut connections add neither extra parameter nor computa-\ntional complexity. The entire network can still be trained\nend-to-end by SGD with backpropagation, and can be eas-\nily implemented using common libraries (e.g., Caffe [19])\nwithout modifying the solvers."
    },
    {
      "bounding_box": [
        {
          "x": 202,
          "y": 2070
        },
        {
          "x": 1198,
          "y": 2070
        },
        {
          "x": 1198,
          "y": 2463
        },
        {
          "x": 202,
          "y": 2463
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='21' style='font-size:20px'>We present comprehensive experiments on ImageNet<br>[36] to show the degradation problem and evaluate our<br>method. We show that: 1) Our extremely deep residual nets<br>are easy to optimize, but the counterpart \"plain\" nets (that<br>simply stack layers) exhibit higher training error when the<br>depth increases; 2) Our deep residual nets can easily enjoy<br>accuracy gains from greatly increased depth, producing re-<br>sults substantially better than previous networks.</p>",
      "id": 21,
      "page": 2,
      "text": "We present comprehensive experiments on ImageNet\n[36] to show the degradation problem and evaluate our\nmethod. We show that: 1) Our extremely deep residual nets\nare easy to optimize, but the counterpart \"plain\" nets (that\nsimply stack layers) exhibit higher training error when the\ndepth increases; 2) Our deep residual nets can easily enjoy\naccuracy gains from greatly increased depth, producing re-\nsults substantially better than previous networks."
    },
    {
      "bounding_box": [
        {
          "x": 203,
          "y": 2473
        },
        {
          "x": 1197,
          "y": 2473
        },
        {
          "x": 1197,
          "y": 2718
        },
        {
          "x": 203,
          "y": 2718
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='22' style='font-size:16px'>Similar phenomena are also shown on the CIFAR-10 set<br>[20], suggesting that the optimization difficulties and the<br>effects of our method are not just akin to a particular dataset.<br>We present successfully trained models on this dataset with<br>over 100 layers, and explore models with over 1000 layers.</p>",
      "id": 22,
      "page": 2,
      "text": "Similar phenomena are also shown on the CIFAR-10 set\n[20], suggesting that the optimization difficulties and the\neffects of our method are not just akin to a particular dataset.\nWe present successfully trained models on this dataset with\nover 100 layers, and explore models with over 1000 layers."
    },
    {
      "bounding_box": [
        {
          "x": 202,
          "y": 2729
        },
        {
          "x": 1198,
          "y": 2729
        },
        {
          "x": 1198,
          "y": 2975
        },
        {
          "x": 202,
          "y": 2975
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='23' style='font-size:18px'>On the ImageNet classification dataset [36], we obtain<br>excellent results by extremely deep residual nets. Our 152-<br>layer residual net is the deepest network ever presented on<br>ImageNet, while still having lower complexity than VGG<br>nets [41]. Our ensemble has 3.57% top-5 error on the</p>",
      "id": 23,
      "page": 2,
      "text": "On the ImageNet classification dataset [36], we obtain\nexcellent results by extremely deep residual nets. Our 152-\nlayer residual net is the deepest network ever presented on\nImageNet, while still having lower complexity than VGG\nnets [41]. Our ensemble has 3.57% top-5 error on the"
    },
    {
      "bounding_box": [
        {
          "x": 1280,
          "y": 308
        },
        {
          "x": 2276,
          "y": 308
        },
        {
          "x": 2276,
          "y": 754
        },
        {
          "x": 1280,
          "y": 754
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='24' style='font-size:18px'>ImageNet test set, and won the 1st place in the ILSVRC<br>2015 classification competition. The extremely deep rep-<br>resentations also have excellent generalization performance<br>on other recognition tasks, and lead us to further win the<br>1st places on: ImageNet detection, ImageNet localization,<br>COCO detection, and COCO segmentation in ILSVRC &<br>COCO 2015 competitions. This strong evidence shows that<br>the residual learning principle is generic, and we expect that<br>it is applicable in other vision and non-vision problems.</p>",
      "id": 24,
      "page": 2,
      "text": "ImageNet test set, and won the 1st place in the ILSVRC\n2015 classification competition. The extremely deep rep-\nresentations also have excellent generalization performance\non other recognition tasks, and lead us to further win the\n1st places on: ImageNet detection, ImageNet localization,\nCOCO detection, and COCO segmentation in ILSVRC &\nCOCO 2015 competitions. This strong evidence shows that\nthe residual learning principle is generic, and we expect that\nit is applicable in other vision and non-vision problems."
    },
    {
      "bounding_box": [
        {
          "x": 1282,
          "y": 811
        },
        {
          "x": 1636,
          "y": 811
        },
        {
          "x": 1636,
          "y": 860
        },
        {
          "x": 1282,
          "y": 860
        }
      ],
      "category": "paragraph",
      "html": "<p id='25' style='font-size:22px'>2. Related Work</p>",
      "id": 25,
      "page": 2,
      "text": "2. Related Work"
    },
    {
      "bounding_box": [
        {
          "x": 1280,
          "y": 899
        },
        {
          "x": 2276,
          "y": 899
        },
        {
          "x": 2276,
          "y": 1293
        },
        {
          "x": 1280,
          "y": 1293
        }
      ],
      "category": "paragraph",
      "html": "<p id='26' style='font-size:16px'>Residual Representations. In image recognition, VLAD<br>[18] is a representation that encodes by the residual vectors<br>with respect to a dictionary, and Fisher Vector [30] can be<br>formulated as a probabilistic version [18] of VLAD. Both<br>of them are powerful shallow representations for image re-<br>trieval and classification [4, 48]. For vector quantization,<br>encoding residual vectors [17] is shown to be more effec-<br>tive than encoding original vectors.</p>",
      "id": 26,
      "page": 2,
      "text": "Residual Representations. In image recognition, VLAD\n[18] is a representation that encodes by the residual vectors\nwith respect to a dictionary, and Fisher Vector [30] can be\nformulated as a probabilistic version [18] of VLAD. Both\nof them are powerful shallow representations for image re-\ntrieval and classification [4, 48]. For vector quantization,\nencoding residual vectors [17] is shown to be more effec-\ntive than encoding original vectors."
    },
    {
      "bounding_box": [
        {
          "x": 1279,
          "y": 1302
        },
        {
          "x": 2277,
          "y": 1302
        },
        {
          "x": 2277,
          "y": 1899
        },
        {
          "x": 1279,
          "y": 1899
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='27' style='font-size:16px'>In low-level vision and computer graphics, for solv-<br>ing Partial Differential Equations (PDEs), the widely used<br>Multigrid method [3] reformulates the system as subprob-<br>lems at multiple scales, where each subproblem is respon-<br>sible for the residual solution between a coarser and a finer<br>scale. An alternative to Multigrid is hierarchical basis pre-<br>conditioning [45, 46], which relies on variables that repre-<br>sent residual vectors between two scales. It has been shown<br>[3, 45, 46] that these solvers converge much faster than stan-<br>dard solvers that are unaware of the residual nature of the<br>solutions. These methods suggest that a good reformulation<br>or preconditioning can simplify the optimization.</p>",
      "id": 27,
      "page": 2,
      "text": "In low-level vision and computer graphics, for solv-\ning Partial Differential Equations (PDEs), the widely used\nMultigrid method [3] reformulates the system as subprob-\nlems at multiple scales, where each subproblem is respon-\nsible for the residual solution between a coarser and a finer\nscale. An alternative to Multigrid is hierarchical basis pre-\nconditioning [45, 46], which relies on variables that repre-\nsent residual vectors between two scales. It has been shown\n[3, 45, 46] that these solvers converge much faster than stan-\ndard solvers that are unaware of the residual nature of the\nsolutions. These methods suggest that a good reformulation\nor preconditioning can simplify the optimization."
    },
    {
      "bounding_box": [
        {
          "x": 1279,
          "y": 1926
        },
        {
          "x": 2274,
          "y": 1926
        },
        {
          "x": 2274,
          "y": 2473
        },
        {
          "x": 1279,
          "y": 2473
        }
      ],
      "category": "paragraph",
      "html": "<p id='28' style='font-size:18px'>Shortcut Connections. Practices and theories that lead to<br>shortcut connections [2, 34, 49] have been studied for a long<br>time. An early practice of training multi-layer perceptrons<br>(MLPs) is to add a linear layer connected from the network<br>input to the output [34, 49]. In [44, 24], a few interme-<br>diate layers are directly connected to auxiliary classifiers<br>for addressing vanishing/exploding gradients. The papers<br>of [39, 38, 31, 47] propose methods for centering layer re-<br>sponses, gradients, and propagated errors, implemented by<br>shortcut connections. In [44], an \"inception\" layer is com-<br>posed of a shortcut branch and a few deeper branches.</p>",
      "id": 28,
      "page": 2,
      "text": "Shortcut Connections. Practices and theories that lead to\nshortcut connections [2, 34, 49] have been studied for a long\ntime. An early practice of training multi-layer perceptrons\n(MLPs) is to add a linear layer connected from the network\ninput to the output [34, 49]. In [44, 24], a few interme-\ndiate layers are directly connected to auxiliary classifiers\nfor addressing vanishing/exploding gradients. The papers\nof [39, 38, 31, 47] propose methods for centering layer re-\nsponses, gradients, and propagated errors, implemented by\nshortcut connections. In [44], an \"inception\" layer is com-\nposed of a shortcut branch and a few deeper branches."
    },
    {
      "bounding_box": [
        {
          "x": 1280,
          "y": 2479
        },
        {
          "x": 2276,
          "y": 2479
        },
        {
          "x": 2276,
          "y": 2977
        },
        {
          "x": 1280,
          "y": 2977
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='29' style='font-size:16px'>Concurrent with our work, \"highway networks\" [42, 43]<br>present shortcut connections with gating functions [15].<br>These gates are data-dependent and have parameters, in<br>contrast to our identity shortcuts that are parameter-free.<br>When a gated shortcut is \"closed\" (approaching zero), the<br>layers in highway networks represent non-residual func-<br>tions. On the contrary, our formulation always learns<br>residual functions; our identity shortcuts are never closed,<br>and all information is always passed through, with addi-<br>tional residual functions to be learned. In addition, high-</p>",
      "id": 29,
      "page": 2,
      "text": "Concurrent with our work, \"highway networks\" [42, 43]\npresent shortcut connections with gating functions [15].\nThese gates are data-dependent and have parameters, in\ncontrast to our identity shortcuts that are parameter-free.\nWhen a gated shortcut is \"closed\" (approaching zero), the\nlayers in highway networks represent non-residual func-\ntions. On the contrary, our formulation always learns\nresidual functions; our identity shortcuts are never closed,\nand all information is always passed through, with addi-\ntional residual functions to be learned. In addition, high-"
    },
    {
      "bounding_box": [
        {
          "x": 1225,
          "y": 3055
        },
        {
          "x": 1251,
          "y": 3055
        },
        {
          "x": 1251,
          "y": 3090
        },
        {
          "x": 1225,
          "y": 3090
        }
      ],
      "category": "footer",
      "html": "<footer id='30' style='font-size:16px'>2</footer>",
      "id": 30,
      "page": 2,
      "text": "2"
    },
    {
      "bounding_box": [
        {
          "x": 204,
          "y": 311
        },
        {
          "x": 1196,
          "y": 311
        },
        {
          "x": 1196,
          "y": 402
        },
        {
          "x": 204,
          "y": 402
        }
      ],
      "category": "paragraph",
      "html": "<p id='31' style='font-size:16px'>way networks have not demonstrated accuracy gains with<br>extremely increased depth (e.g., over 100 layers).</p>",
      "id": 31,
      "page": 3,
      "text": "way networks have not demonstrated accuracy gains with\nextremely increased depth (e.g., over 100 layers)."
    },
    {
      "bounding_box": [
        {
          "x": 202,
          "y": 452
        },
        {
          "x": 777,
          "y": 452
        },
        {
          "x": 777,
          "y": 503
        },
        {
          "x": 202,
          "y": 503
        }
      ],
      "category": "paragraph",
      "html": "<p id='32' style='font-size:22px'>3. Deep Residual Learning</p>",
      "id": 32,
      "page": 3,
      "text": "3. Deep Residual Learning"
    },
    {
      "bounding_box": [
        {
          "x": 204,
          "y": 535
        },
        {
          "x": 652,
          "y": 535
        },
        {
          "x": 652,
          "y": 582
        },
        {
          "x": 204,
          "y": 582
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='33' style='font-size:20px'>3.1. Residual Learning</p>",
      "id": 33,
      "page": 3,
      "text": "3.1. Residual Learning"
    },
    {
      "bounding_box": [
        {
          "x": 200,
          "y": 612
        },
        {
          "x": 1199,
          "y": 612
        },
        {
          "x": 1199,
          "y": 1304
        },
        {
          "x": 200,
          "y": 1304
        }
      ],
      "category": "paragraph",
      "html": "<p id='34' style='font-size:16px'>Let us consider H(x) as an underlying mapping to be<br>fit by a few stacked layers (not necessarily the entire net),<br>with x denoting the inputs to the first of these layers. If one<br>hypothesizes that multiple nonlinear layers can asymptoti-<br>cally approximate complicated functions2, then it is equiv-<br>alent to hypothesize that they can asymptotically approxi-<br>mate the residual functions, i.e., H(x) - x (assuming that<br>the input and output are of the same dimensions). So<br>rather than expect stacked layers to approximate H(x), we<br>explicitly let these layers approximate a residual function<br>F(x) := H(x) - X. The original function thus becomes<br>F(x) +x. Although both forms should be able to asymptot-<br>ically approximate the desired functions (as hypothesized),<br>the ease of learning might be different.</p>",
      "id": 34,
      "page": 3,
      "text": "Let us consider H(x) as an underlying mapping to be\nfit by a few stacked layers (not necessarily the entire net),\nwith x denoting the inputs to the first of these layers. If one\nhypothesizes that multiple nonlinear layers can asymptoti-\ncally approximate complicated functions2, then it is equiv-\nalent to hypothesize that they can asymptotically approxi-\nmate the residual functions, i.e., H(x) - x (assuming that\nthe input and output are of the same dimensions). So\nrather than expect stacked layers to approximate H(x), we\nexplicitly let these layers approximate a residual function\nF(x) := H(x) - X. The original function thus becomes\nF(x) +x. Although both forms should be able to asymptot-\nically approximate the desired functions (as hypothesized),\nthe ease of learning might be different."
    },
    {
      "bounding_box": [
        {
          "x": 200,
          "y": 1312
        },
        {
          "x": 1199,
          "y": 1312
        },
        {
          "x": 1199,
          "y": 1854
        },
        {
          "x": 200,
          "y": 1854
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='35' style='font-size:18px'>This reformulation is motivated by the counterintuitive<br>phenomena about the degradation problem (Fig. 1, left). As<br>we discussed in the introduction, if the added layers can<br>be constructed as identity mappings, a deeper model should<br>have training error no greater than its shallower counter-<br>part. The degradation problem suggests that the solvers<br>might have difficulties in approximating identity mappings<br>by multiple nonlinear layers. With the residual learning re-<br>formulation, if identity mappings are optimal, the solvers<br>may simply drive the weights of the multiple nonlinear lay-<br>ers toward zero to approach identity mappings.</p>",
      "id": 35,
      "page": 3,
      "text": "This reformulation is motivated by the counterintuitive\nphenomena about the degradation problem (Fig. 1, left). As\nwe discussed in the introduction, if the added layers can\nbe constructed as identity mappings, a deeper model should\nhave training error no greater than its shallower counter-\npart. The degradation problem suggests that the solvers\nmight have difficulties in approximating identity mappings\nby multiple nonlinear layers. With the residual learning re-\nformulation, if identity mappings are optimal, the solvers\nmay simply drive the weights of the multiple nonlinear lay-\ners toward zero to approach identity mappings."
    },
    {
      "bounding_box": [
        {
          "x": 202,
          "y": 1860
        },
        {
          "x": 1199,
          "y": 1860
        },
        {
          "x": 1199,
          "y": 2305
        },
        {
          "x": 202,
          "y": 2305
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='36' style='font-size:16px'>In real cases, it is unlikely that identity mappings are op-<br>timal, but our reformulation may help to precondition the<br>problem. If the optimal function is closer to an identity<br>mapping than to a zero mapping, it should be easier for the<br>solver to find the perturbations with reference to an identity<br>mapping, than to learn the function as a new one. We show<br>by experiments (Fig. 7) that the learned residual functions in<br>general have small responses, suggesting that identity map-<br>pings provide reasonable preconditioning.</p>",
      "id": 36,
      "page": 3,
      "text": "In real cases, it is unlikely that identity mappings are op-\ntimal, but our reformulation may help to precondition the\nproblem. If the optimal function is closer to an identity\nmapping than to a zero mapping, it should be easier for the\nsolver to find the perturbations with reference to an identity\nmapping, than to learn the function as a new one. We show\nby experiments (Fig. 7) that the learned residual functions in\ngeneral have small responses, suggesting that identity map-\npings provide reasonable preconditioning."
    },
    {
      "bounding_box": [
        {
          "x": 204,
          "y": 2338
        },
        {
          "x": 895,
          "y": 2338
        },
        {
          "x": 895,
          "y": 2388
        },
        {
          "x": 204,
          "y": 2388
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='37' style='font-size:22px'>3.2. Identity Mapping by Shortcuts</p>",
      "id": 37,
      "page": 3,
      "text": "3.2. Identity Mapping by Shortcuts"
    },
    {
      "bounding_box": [
        {
          "x": 203,
          "y": 2418
        },
        {
          "x": 1197,
          "y": 2418
        },
        {
          "x": 1197,
          "y": 2562
        },
        {
          "x": 203,
          "y": 2562
        }
      ],
      "category": "paragraph",
      "html": "<p id='38' style='font-size:16px'>We adopt residual learning to every few stacked layers.<br>A building block is shown in Fig. 2. Formally, in this paper<br>we consider a building block defined as:</p>",
      "id": 38,
      "page": 3,
      "text": "We adopt residual learning to every few stacked layers.\nA building block is shown in Fig. 2. Formally, in this paper\nwe consider a building block defined as:"
    },
    {
      "bounding_box": [
        {
          "x": 202,
          "y": 2700
        },
        {
          "x": 1198,
          "y": 2700
        },
        {
          "x": 1198,
          "y": 2897
        },
        {
          "x": 202,
          "y": 2897
        }
      ],
      "category": "paragraph",
      "html": "<p id='39' style='font-size:16px'>Here x and y are the input and output vectors of the lay-<br>ers considered. The function F(x, {Wi}) represents the<br>residual mapping to be learned. For the example in Fig. 2<br>that has two layers, F = W20(W1x) in which 0 denotes</p>",
      "id": 39,
      "page": 3,
      "text": "Here x and y are the input and output vectors of the lay-\ners considered. The function F(x, {Wi}) represents the\nresidual mapping to be learned. For the example in Fig. 2\nthat has two layers, F = W20(W1x) in which 0 denotes"
    },
    {
      "bounding_box": [
        {
          "x": 249,
          "y": 2930
        },
        {
          "x": 1075,
          "y": 2930
        },
        {
          "x": 1075,
          "y": 2973
        },
        {
          "x": 249,
          "y": 2973
        }
      ],
      "category": "paragraph",
      "html": "<p id='40' style='font-size:14px'>2This hypothesis, however, is still an open question. See [28].</p>",
      "id": 40,
      "page": 3,
      "text": "2This hypothesis, however, is still an open question. See [28]."
    },
    {
      "bounding_box": [
        {
          "x": 1279,
          "y": 307
        },
        {
          "x": 2277,
          "y": 307
        },
        {
          "x": 2277,
          "y": 503
        },
        {
          "x": 1279,
          "y": 503
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='41' style='font-size:16px'>ReLU [29] and the biases are omitted for simplifying no-<br>tations. The operation F + x is performed by a shortcut<br>connection and element-wise addition. We adopt the sec-<br>ond nonlinearity after the addition (i.e., o(y), see Fig. 2).</p>",
      "id": 41,
      "page": 3,
      "text": "ReLU [29] and the biases are omitted for simplifying no-\ntations. The operation F + x is performed by a shortcut\nconnection and element-wise addition. We adopt the sec-\nond nonlinearity after the addition (i.e., o(y), see Fig. 2)."
    },
    {
      "bounding_box": [
        {
          "x": 1280,
          "y": 510
        },
        {
          "x": 2276,
          "y": 510
        },
        {
          "x": 2276,
          "y": 852
        },
        {
          "x": 1280,
          "y": 852
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='42' style='font-size:16px'>The shortcut connections in Eqn.(1) introduce neither ex-<br>tra parameter nor computation complexity. This is not only<br>attractive in practice but also important in our comparisons<br>between plain and residual networks. We can fairly com-<br>pare plain/residual networks that simultaneously have the<br>same number of parameters, depth, width, and computa-<br>tional cost (except for the negligible element-wise addition).</p>",
      "id": 42,
      "page": 3,
      "text": "The shortcut connections in Eqn.(1) introduce neither ex-\ntra parameter nor computation complexity. This is not only\nattractive in practice but also important in our comparisons\nbetween plain and residual networks. We can fairly com-\npare plain/residual networks that simultaneously have the\nsame number of parameters, depth, width, and computa-\ntional cost (except for the negligible element-wise addition)."
    },
    {
      "bounding_box": [
        {
          "x": 1280,
          "y": 856
        },
        {
          "x": 2276,
          "y": 856
        },
        {
          "x": 2276,
          "y": 1053
        },
        {
          "x": 1280,
          "y": 1053
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='43' style='font-size:16px'>The dimensions of x and F must be equal in Eqn.(1).<br>If this is not the case (e.g., when changing the input/output<br>channels), we can perform a linear projection Ws by the<br>shortcut connections to match the dimensions:</p>",
      "id": 43,
      "page": 3,
      "text": "The dimensions of x and F must be equal in Eqn.(1).\nIf this is not the case (e.g., when changing the input/output\nchannels), we can perform a linear projection Ws by the\nshortcut connections to match the dimensions:"
    },
    {
      "bounding_box": [
        {
          "x": 1280,
          "y": 1192
        },
        {
          "x": 2275,
          "y": 1192
        },
        {
          "x": 2275,
          "y": 1387
        },
        {
          "x": 1280,
          "y": 1387
        }
      ],
      "category": "paragraph",
      "html": "<p id='44' style='font-size:16px'>We can also use a square matrix Ws in Eqn.(1). But we will<br>show by experiments that the identity mapping is sufficient<br>for addressing the degradation problem and is economical,<br>and thus Ws is only used when matching dimensions.</p>",
      "id": 44,
      "page": 3,
      "text": "We can also use a square matrix Ws in Eqn.(1). But we will\nshow by experiments that the identity mapping is sufficient\nfor addressing the degradation problem and is economical,\nand thus Ws is only used when matching dimensions."
    },
    {
      "bounding_box": [
        {
          "x": 1280,
          "y": 1393
        },
        {
          "x": 2277,
          "y": 1393
        },
        {
          "x": 2277,
          "y": 1642
        },
        {
          "x": 1280,
          "y": 1642
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='45' style='font-size:16px'>The form of the residual function F is flexible. Exper-<br>iments in this paper involve a function F that has two or<br>three layers (Fig. 5), while more layers are possible. But if<br>F has only a single layer, Eqn.(1) is similar to a linear layer:<br>y = W1x + x, for which we have not observed advantages.</p>",
      "id": 45,
      "page": 3,
      "text": "The form of the residual function F is flexible. Exper-\niments in this paper involve a function F that has two or\nthree layers (Fig. 5), while more layers are possible. But if\nF has only a single layer, Eqn.(1) is similar to a linear layer:\ny = W1x + x, for which we have not observed advantages."
    },
    {
      "bounding_box": [
        {
          "x": 1280,
          "y": 1645
        },
        {
          "x": 2278,
          "y": 1645
        },
        {
          "x": 2278,
          "y": 1890
        },
        {
          "x": 1280,
          "y": 1890
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='46' style='font-size:16px'>We also note that although the above notations are about<br>fully-connected layers for simplicity, they are applicable to<br>convolutional layers. The function F(x, {Wi}) can repre-<br>sent multiple convolutional layers. The element-wise addi-<br>tion is performed on two feature maps, channel by channel.</p>",
      "id": 46,
      "page": 3,
      "text": "We also note that although the above notations are about\nfully-connected layers for simplicity, they are applicable to\nconvolutional layers. The function F(x, {Wi}) can repre-\nsent multiple convolutional layers. The element-wise addi-\ntion is performed on two feature maps, channel by channel."
    },
    {
      "bounding_box": [
        {
          "x": 1281,
          "y": 1925
        },
        {
          "x": 1817,
          "y": 1925
        },
        {
          "x": 1817,
          "y": 1974
        },
        {
          "x": 1281,
          "y": 1974
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='47' style='font-size:20px'>3.3. Network Architectures</p>",
      "id": 47,
      "page": 3,
      "text": "3.3. Network Architectures"
    },
    {
      "bounding_box": [
        {
          "x": 1280,
          "y": 2003
        },
        {
          "x": 2275,
          "y": 2003
        },
        {
          "x": 2275,
          "y": 2151
        },
        {
          "x": 1280,
          "y": 2151
        }
      ],
      "category": "paragraph",
      "html": "<p id='48' style='font-size:16px'>We have tested various plain/residual nets, and have ob-<br>served consistent phenomena. To provide instances for dis-<br>cussion, we describe two models for ImageNet as follows.</p>",
      "id": 48,
      "page": 3,
      "text": "We have tested various plain/residual nets, and have ob-\nserved consistent phenomena. To provide instances for dis-\ncussion, we describe two models for ImageNet as follows."
    },
    {
      "bounding_box": [
        {
          "x": 1278,
          "y": 2178
        },
        {
          "x": 2275,
          "y": 2178
        },
        {
          "x": 2275,
          "y": 2772
        },
        {
          "x": 1278,
          "y": 2772
        }
      ],
      "category": "paragraph",
      "html": "<p id='49' style='font-size:16px'>Plain Network. Our plain baselines (Fig. 3, middle) are<br>mainly inspired by the philosophy of VGG nets [41] (Fig. 3,<br>left). The convolutional layers mostly have 3x3 filters and<br>follow two simple design rules: (i) for the same output<br>feature map size, the layers have the same number of fil-<br>ters; and (ii) if the feature map size is halved, the num-<br>ber of filters is doubled so as to preserve the time com-<br>plexity per layer. We perform downsampling directly by<br>convolutional layers that have a stride of 2. The network<br>ends with a global average pooling layer and a 1000-way<br>fully-connected layer with softmax. The total number of<br>weighted layers is 34 in Fig. 3 (middle).</p>",
      "id": 49,
      "page": 3,
      "text": "Plain Network. Our plain baselines (Fig. 3, middle) are\nmainly inspired by the philosophy of VGG nets [41] (Fig. 3,\nleft). The convolutional layers mostly have 3x3 filters and\nfollow two simple design rules: (i) for the same output\nfeature map size, the layers have the same number of fil-\nters; and (ii) if the feature map size is halved, the num-\nber of filters is doubled so as to preserve the time com-\nplexity per layer. We perform downsampling directly by\nconvolutional layers that have a stride of 2. The network\nends with a global average pooling layer and a 1000-way\nfully-connected layer with softmax. The total number of\nweighted layers is 34 in Fig. 3 (middle)."
    },
    {
      "bounding_box": [
        {
          "x": 1281,
          "y": 2778
        },
        {
          "x": 2276,
          "y": 2778
        },
        {
          "x": 2276,
          "y": 2975
        },
        {
          "x": 1281,
          "y": 2975
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='50' style='font-size:18px'>It is worth noticing that our model has fewer filters and<br>lower complexity than VGG nets [41] (Fig. 3, left). Our 34-<br>layer baseline has 3.6 billion FLOPs (multiply-adds), which<br>is only 18% of VGG-19 (19.6 billion FLOPs).</p>",
      "id": 50,
      "page": 3,
      "text": "It is worth noticing that our model has fewer filters and\nlower complexity than VGG nets [41] (Fig. 3, left). Our 34-\nlayer baseline has 3.6 billion FLOPs (multiply-adds), which\nis only 18% of VGG-19 (19.6 billion FLOPs)."
    },
    {
      "bounding_box": [
        {
          "x": 1224,
          "y": 3053
        },
        {
          "x": 1252,
          "y": 3053
        },
        {
          "x": 1252,
          "y": 3093
        },
        {
          "x": 1224,
          "y": 3093
        }
      ],
      "category": "footer",
      "html": "<footer id='51' style='font-size:14px'>3</footer>",
      "id": 51,
      "page": 3,
      "text": "3"
    },
    {
      "bounding_box": [
        {
          "x": 208,
          "y": 292
        },
        {
          "x": 1190,
          "y": 292
        },
        {
          "x": 1190,
          "y": 2591
        },
        {
          "x": 208,
          "y": 2591
        }
      ],
      "category": "figure",
      "html": "<figure><img id='52' style='font-size:14px' alt=\"VGG-19 34-layer plain 34-layer residual\nimage image image\noutput\n3x3 conv, 64\nsize: 224\n3x3 conv, 64\npool,/2\noutput\nsize: 112\n3x3 conv, 128\n3x3 conv, 128 7x7 conv, 64, /2 7x7 conv, 64,/2\npool, /2 pool, /2 pool, /2\noutput\nsize: 56\n3x3 conv, 256 3x3 conv, 64 3x3 conv, 64\n3x3 conv, 256 3x3 conv, 64 3x3 conv, 64\n3x3 conv, 256 3x3 conv, 64 3x3 conv, 64\n3x3 conv, 256 3x3 conv, 64 3x3 conv, 64\n3x3 conv, 64 3x3 conv, 64\n3x3 conv, 64 3x3 conv, 64\npool,/2 3x3 conv, 128,/2 3x3 conv, 128,/2\noutput\nsize: 28\n3x3 conv, 512 3x3 conv, 128 3x3 conv, 128\n3x3 conv, 512 3x3 conv, 128 3x3 conv, 128\n3x3 conv, 512 3x3 conv, 128 3x3 conv, 128\n3x3 conv, 512 3x3 conv, 128 3x3 conv, 128\n3x3 conv, 128 3x3 conv, 128\n3x3 conv, 128 3x3 conv, 128\n3x3 conv, 128 3x3 conv, 128\noutput\npool, /2 3x3 conv, 256,/2 3x3 conv, 256,/2\nsize: 14\n3x3 conv, 512 3x3 conv, 256 3x3 conv, 256\n3x3 conv, 512 3x3 conv, 256 3x3 conv, 256\n3x3 conv, 512 3x3 conv, 256 3x3 conv, 256\n3x3 conv, 512 3x3 conv, 256 3x3 conv, 256\n3x3 conv, 256 3x3 conv, 256\n3x3 conv, 256 3x3 conv, 256\n3x3 conv, 256 3x3 conv, 256\n3x3 conv, 256 3x3 conv, 256\n3x3 conv, 256 3x3 conv, 256\n3x3 conv, 256 3x3 conv, 256\n3x3 conv, 256 3x3 conv, 256\noutput\npool,/2 3x3 conv, 512,/2 3x3 conv, 512,/2\nsize: 7\n3x3 conv, 512 3x3 conv, 512\n3x3 conv, 512 3x3 conv, 512\n3x3 conv, 512 3x3 conv, 512\n3x3 conv, 512 3x3 conv, 512\n3x3 conv, 512 3x3 conv, 512\noutput\nfc 4096 avg pool avg pool\nsize: 1\nfc 4096 fc 1000 fc 1000\nfc 1000\" data-coord=\"top-left:(208,292); bottom-right:(1190,2591)\" /></figure>",
      "id": 52,
      "page": 4,
      "text": "VGG-19 34-layer plain 34-layer residual\nimage image image\noutput\n3x3 conv, 64\nsize: 224\n3x3 conv, 64\npool,/2\noutput\nsize: 112\n3x3 conv, 128\n3x3 conv, 128 7x7 conv, 64, /2 7x7 conv, 64,/2\npool, /2 pool, /2 pool, /2\noutput\nsize: 56\n3x3 conv, 256 3x3 conv, 64 3x3 conv, 64\n3x3 conv, 256 3x3 conv, 64 3x3 conv, 64\n3x3 conv, 256 3x3 conv, 64 3x3 conv, 64\n3x3 conv, 256 3x3 conv, 64 3x3 conv, 64\n3x3 conv, 64 3x3 conv, 64\n3x3 conv, 64 3x3 conv, 64\npool,/2 3x3 conv, 128,/2 3x3 conv, 128,/2\noutput\nsize: 28\n3x3 conv, 512 3x3 conv, 128 3x3 conv, 128\n3x3 conv, 512 3x3 conv, 128 3x3 conv, 128\n3x3 conv, 512 3x3 conv, 128 3x3 conv, 128\n3x3 conv, 512 3x3 conv, 128 3x3 conv, 128\n3x3 conv, 128 3x3 conv, 128\n3x3 conv, 128 3x3 conv, 128\n3x3 conv, 128 3x3 conv, 128\noutput\npool, /2 3x3 conv, 256,/2 3x3 conv, 256,/2\nsize: 14\n3x3 conv, 512 3x3 conv, 256 3x3 conv, 256\n3x3 conv, 512 3x3 conv, 256 3x3 conv, 256\n3x3 conv, 512 3x3 conv, 256 3x3 conv, 256\n3x3 conv, 512 3x3 conv, 256 3x3 conv, 256\n3x3 conv, 256 3x3 conv, 256\n3x3 conv, 256 3x3 conv, 256\n3x3 conv, 256 3x3 conv, 256\n3x3 conv, 256 3x3 conv, 256\n3x3 conv, 256 3x3 conv, 256\n3x3 conv, 256 3x3 conv, 256\n3x3 conv, 256 3x3 conv, 256\noutput\npool,/2 3x3 conv, 512,/2 3x3 conv, 512,/2\nsize: 7\n3x3 conv, 512 3x3 conv, 512\n3x3 conv, 512 3x3 conv, 512\n3x3 conv, 512 3x3 conv, 512\n3x3 conv, 512 3x3 conv, 512\n3x3 conv, 512 3x3 conv, 512\noutput\nfc 4096 avg pool avg pool\nsize: 1\nfc 4096 fc 1000 fc 1000\nfc 1000"
    },
    {
      "bounding_box": [
        {
          "x": 202,
          "y": 2633
        },
        {
          "x": 1197,
          "y": 2633
        },
        {
          "x": 1197,
          "y": 2904
        },
        {
          "x": 202,
          "y": 2904
        }
      ],
      "category": "caption",
      "html": "<caption id='53' style='font-size:14px'>Figure 3. Example network architectures for ImageNet. Left: the<br>VGG-19 model [41] (19.6 billion FLOPs) as a reference. Mid-<br>dle: a plain network with 34 parameter layers (3.6 billion FLOPs).<br>Right: a residual network with 34 parameter layers (3.6 billion<br>FLOPs). The dotted shortcuts increase dimensions. Table 1 shows<br>more details and other variants.</caption>",
      "id": 53,
      "page": 4,
      "text": "Figure 3. Example network architectures for ImageNet. Left: the\nVGG-19 model [41] (19.6 billion FLOPs) as a reference. Mid-\ndle: a plain network with 34 parameter layers (3.6 billion FLOPs).\nRight: a residual network with 34 parameter layers (3.6 billion\nFLOPs). The dotted shortcuts increase dimensions. Table 1 shows\nmore details and other variants."
    },
    {
      "bounding_box": [
        {
          "x": 1278,
          "y": 306
        },
        {
          "x": 2277,
          "y": 306
        },
        {
          "x": 2277,
          "y": 952
        },
        {
          "x": 1278,
          "y": 952
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='54' style='font-size:18px'>Residual Network. Based on the above plain network, we<br>insert shortcut connections (Fig. 3, right) which turn the<br>network into its counterpart residual version. The identity<br>shortcuts (Eqn.(1)) can be directly used when the input and<br>output are of the same dimensions (solid line shortcuts in<br>Fig. 3). When the dimensions increase (dotted line shortcuts<br>in Fig. 3), we consider two options: (A) The shortcut still<br>performs identity mapping, with extra zero entries padded<br>for increasing dimensions. This option introduces no extra<br>parameter; (B) The projection shortcut in Eqn.(2) is used to<br>match dimensions (done by 1 x1 convolutions). For both<br>options, when the shortcuts go across feature maps of two<br>sizes, they are performed with a stride of 2.</p>",
      "id": 54,
      "page": 4,
      "text": "Residual Network. Based on the above plain network, we\ninsert shortcut connections (Fig. 3, right) which turn the\nnetwork into its counterpart residual version. The identity\nshortcuts (Eqn.(1)) can be directly used when the input and\noutput are of the same dimensions (solid line shortcuts in\nFig. 3). When the dimensions increase (dotted line shortcuts\nin Fig. 3), we consider two options: (A) The shortcut still\nperforms identity mapping, with extra zero entries padded\nfor increasing dimensions. This option introduces no extra\nparameter; (B) The projection shortcut in Eqn.(2) is used to\nmatch dimensions (done by 1 x1 convolutions). For both\noptions, when the shortcuts go across feature maps of two\nsizes, they are performed with a stride of 2."
    },
    {
      "bounding_box": [
        {
          "x": 1281,
          "y": 983
        },
        {
          "x": 1680,
          "y": 983
        },
        {
          "x": 1680,
          "y": 1029
        },
        {
          "x": 1281,
          "y": 1029
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='55' style='font-size:20px'>3.4. Implementation</p>",
      "id": 55,
      "page": 4,
      "text": "3.4. Implementation"
    },
    {
      "bounding_box": [
        {
          "x": 1277,
          "y": 1059
        },
        {
          "x": 2277,
          "y": 1059
        },
        {
          "x": 2277,
          "y": 1750
        },
        {
          "x": 1277,
          "y": 1750
        }
      ],
      "category": "paragraph",
      "html": "<p id='56' style='font-size:18px'>Our implementation for ImageNet follows the practice<br>in [21, 41]. The image is resized with its shorter side ran-<br>domly sampled in [256, 480] for scale augmentation [41].<br>A 224x 224 crop is randomly sampled from an image or its<br>horizontal flip, with the per-pixel mean subtracted [21]. The<br>standard color augmentation in [21] is used. We adopt batch<br>normalization (BN) [16] right after each convolution and<br>before activation, following [16]. We initialize the weights<br>as in [13] and train all plain/residual nets from scratch. We<br>use SGD with a mini-batch size of 256. The learning rate<br>starts from 0.1 and is divided by 10 when the error plateaus,<br>and the models are trained for up to 60 x 104 iterations. We<br>use a weight decay of 0.0001 and a momentum of 0.9. We<br>do not use dropout [14], following the practice in [16].</p>",
      "id": 56,
      "page": 4,
      "text": "Our implementation for ImageNet follows the practice\nin [21, 41]. The image is resized with its shorter side ran-\ndomly sampled in [256, 480] for scale augmentation [41].\nA 224x 224 crop is randomly sampled from an image or its\nhorizontal flip, with the per-pixel mean subtracted [21]. The\nstandard color augmentation in [21] is used. We adopt batch\nnormalization (BN) [16] right after each convolution and\nbefore activation, following [16]. We initialize the weights\nas in [13] and train all plain/residual nets from scratch. We\nuse SGD with a mini-batch size of 256. The learning rate\nstarts from 0.1 and is divided by 10 when the error plateaus,\nand the models are trained for up to 60 x 104 iterations. We\nuse a weight decay of 0.0001 and a momentum of 0.9. We\ndo not use dropout [14], following the practice in [16]."
    },
    {
      "bounding_box": [
        {
          "x": 1280,
          "y": 1758
        },
        {
          "x": 2276,
          "y": 1758
        },
        {
          "x": 2276,
          "y": 2003
        },
        {
          "x": 1280,
          "y": 2003
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='57' style='font-size:18px'>In testing, for comparison studies we adopt the standard<br>10-crop testing [21]. For best results, we adopt the fully-<br>convolutional form as in [41, 13], and average the scores<br>at multiple scales (images are resized such that the shorter<br>side is in {224, 256, 384, 480, 640}).</p>",
      "id": 57,
      "page": 4,
      "text": "In testing, for comparison studies we adopt the standard\n10-crop testing [21]. For best results, we adopt the fully-\nconvolutional form as in [41, 13], and average the scores\nat multiple scales (images are resized such that the shorter\nside is in {224, 256, 384, 480, 640})."
    },
    {
      "bounding_box": [
        {
          "x": 1281,
          "y": 2047
        },
        {
          "x": 1611,
          "y": 2047
        },
        {
          "x": 1611,
          "y": 2097
        },
        {
          "x": 1281,
          "y": 2097
        }
      ],
      "category": "paragraph",
      "html": "<p id='58' style='font-size:22px'>4. Experiments</p>",
      "id": 58,
      "page": 4,
      "text": "4. Experiments"
    },
    {
      "bounding_box": [
        {
          "x": 1281,
          "y": 2128
        },
        {
          "x": 1831,
          "y": 2128
        },
        {
          "x": 1831,
          "y": 2174
        },
        {
          "x": 1281,
          "y": 2174
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='59' style='font-size:20px'>4.1. ImageNet Classification</p>",
      "id": 59,
      "page": 4,
      "text": "4.1. ImageNet Classification"
    },
    {
      "bounding_box": [
        {
          "x": 1280,
          "y": 2206
        },
        {
          "x": 2276,
          "y": 2206
        },
        {
          "x": 2276,
          "y": 2500
        },
        {
          "x": 1280,
          "y": 2500
        }
      ],
      "category": "paragraph",
      "html": "<p id='60' style='font-size:16px'>We evaluate our method on the ImageNet 2012 classifi-<br>cation dataset [36] that consists of 1000 classes. The models<br>are trained on the 1.28 million training images, and evalu-<br>ated on the 50k validation images. We also obtain a final<br>result on the 100k test images, reported by the test server.<br>We evaluate both top-1 and top-5 error rates.</p>",
      "id": 60,
      "page": 4,
      "text": "We evaluate our method on the ImageNet 2012 classifi-\ncation dataset [36] that consists of 1000 classes. The models\nare trained on the 1.28 million training images, and evalu-\nated on the 50k validation images. We also obtain a final\nresult on the 100k test images, reported by the test server.\nWe evaluate both top-1 and top-5 error rates."
    },
    {
      "bounding_box": [
        {
          "x": 1281,
          "y": 2528
        },
        {
          "x": 2275,
          "y": 2528
        },
        {
          "x": 2275,
          "y": 2722
        },
        {
          "x": 1281,
          "y": 2722
        }
      ],
      "category": "paragraph",
      "html": "<p id='61' style='font-size:18px'>Plain Networks. We first evaluate 18-layer and 34-layer<br>plain nets. The 34-layer plain net is in Fig. 3 (middle). The<br>18-layer plain net is of a similar form. See Table 1 for de-<br>tailed architectures.</p>",
      "id": 61,
      "page": 4,
      "text": "Plain Networks. We first evaluate 18-layer and 34-layer\nplain nets. The 34-layer plain net is in Fig. 3 (middle). The\n18-layer plain net is of a similar form. See Table 1 for de-\ntailed architectures."
    },
    {
      "bounding_box": [
        {
          "x": 1280,
          "y": 2730
        },
        {
          "x": 2277,
          "y": 2730
        },
        {
          "x": 2277,
          "y": 2976
        },
        {
          "x": 1280,
          "y": 2976
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='62' style='font-size:16px'>The results in Table 2 show that the deeper 34-layer plain<br>net has higher validation error than the shallower 18-layer<br>plain net. To reveal the reasons, in Fig. 4 (left) we com-<br>pare their training/validation errors during the training pro-<br>cedure. We have observed the degradation problem - the</p>",
      "id": 62,
      "page": 4,
      "text": "The results in Table 2 show that the deeper 34-layer plain\nnet has higher validation error than the shallower 18-layer\nplain net. To reveal the reasons, in Fig. 4 (left) we com-\npare their training/validation errors during the training pro-\ncedure. We have observed the degradation problem - the"
    },
    {
      "bounding_box": [
        {
          "x": 1226,
          "y": 3057
        },
        {
          "x": 1248,
          "y": 3057
        },
        {
          "x": 1248,
          "y": 3087
        },
        {
          "x": 1226,
          "y": 3087
        }
      ],
      "category": "footer",
      "html": "<footer id='63' style='font-size:16px'>4</footer>",
      "id": 63,
      "page": 4,
      "text": "4"
    },
    {
      "bounding_box": [
        {
          "x": 520,
          "y": 291
        },
        {
          "x": 1961,
          "y": 291
        },
        {
          "x": 1961,
          "y": 923
        },
        {
          "x": 520,
          "y": 923
        }
      ],
      "category": "table",
      "html": "<table id='64' style='font-size:14px'><tr><td>layer name</td><td>output size</td><td>18-layer</td><td>34-layer</td><td></td><td colspan=\"2\">50-layer</td><td colspan=\"2\">101-layer</td><td colspan=\"2\">152-layer</td></tr><tr><td>conv1</td><td>112x112</td><td colspan=\"9\">7x7, 64, stride 2</td></tr><tr><td rowspan=\"2\">conv2_x</td><td rowspan=\"2\">56x56</td><td colspan=\"9\">3x3 max pool, stride 2</td></tr><tr><td>3x3, 64 x2 3x3, 64</td><td></td><td>3x3, 64 x3 3x3, 64</td><td>1x1, 64 3x3, 64 1x1, 256</td><td>x3</td><td>1x1, 64 3x3, 64 1x1, 256</td><td>x3</td><td>1x1, 64 3x3, 64 1x1, 256</td><td>x3</td></tr><tr><td>conv3_x</td><td>28x28</td><td>3x3, 128 x2 3x3, 128</td><td>3x3, 128 128</td><td>x4 3x3,</td><td>1x1, 128 3x3, 128 1x1, 512</td><td>x4</td><td>1x1, 128 3x3, 128 1x1, 512</td><td>x4</td><td>1x1, 128 3x3, 128 1x1, 512</td><td>x8</td></tr><tr><td>conv4_x</td><td>14x14</td><td>3x3,256 x2 3x3,256</td><td>256</td><td>3x3, x6 3x3, 256</td><td>1x1, 256 3x3,256 1x1, 1024</td><td>x6</td><td>1x1,256 3x3,256 1x1, 1024</td><td>x23</td><td>1x1,256 3x3,256 1x1, 1024</td><td>x36</td></tr><tr><td>conv5_x</td><td>7x7</td><td>3x3,512 x2 3x3,512</td><td>3x3,512 3x3,512</td><td>x3</td><td>1x1, 512 3x3, 512 1x1, 2048</td><td>x3</td><td>1x1, 512 3x3, 512 1x1, 2048</td><td>x3</td><td>1x1, 512 3x3, 512 1x1, 2048</td><td>x3</td></tr><tr><td></td><td>1x1</td><td colspan=\"9\">average pool, 1000-d fc, softmax</td></tr><tr><td colspan=\"2\">FLOPs</td><td colspan=\"2\">1.8x109</td><td>3.6x109</td><td colspan=\"2\">3.8x109</td><td colspan=\"2\">7.6x109</td><td colspan=\"2\">11.3x109</td></tr></table>",
      "id": 64,
      "page": 5,
      "text": "layer name output size 18-layer 34-layer  50-layer 101-layer 152-layer\n conv1 112x112 7x7, 64, stride 2\n conv2_x 56x56 3x3 max pool, stride 2\n 3x3, 64 x2 3x3, 64  3x3, 64 x3 3x3, 64 1x1, 64 3x3, 64 1x1, 256 x3 1x1, 64 3x3, 64 1x1, 256 x3 1x1, 64 3x3, 64 1x1, 256 x3\n conv3_x 28x28 3x3, 128 x2 3x3, 128 3x3, 128 128 x4 3x3, 1x1, 128 3x3, 128 1x1, 512 x4 1x1, 128 3x3, 128 1x1, 512 x4 1x1, 128 3x3, 128 1x1, 512 x8\n conv4_x 14x14 3x3,256 x2 3x3,256 256 3x3, x6 3x3, 256 1x1, 256 3x3,256 1x1, 1024 x6 1x1,256 3x3,256 1x1, 1024 x23 1x1,256 3x3,256 1x1, 1024 x36\n conv5_x 7x7 3x3,512 x2 3x3,512 3x3,512 3x3,512 x3 1x1, 512 3x3, 512 1x1, 2048 x3 1x1, 512 3x3, 512 1x1, 2048 x3 1x1, 512 3x3, 512 1x1, 2048 x3\n  1x1 average pool, 1000-d fc, softmax\n FLOPs 1.8x109 3.6x109 3.8x109 7.6x109"
    },
    {
      "bounding_box": [
        {
          "x": 204,
          "y": 932
        },
        {
          "x": 2272,
          "y": 932
        },
        {
          "x": 2272,
          "y": 1022
        },
        {
          "x": 204,
          "y": 1022
        }
      ],
      "category": "caption",
      "html": "<br><caption id='65' style='font-size:18px'>Table 1. Architectures for ImageNet. Building blocks are shown in brackets (see also Fig. 5), with the numbers of blocks stacked. Down-<br>sampling is performed by conv3_1, conv4_1, and conv5_1 with a stride of 2.</caption>",
      "id": 65,
      "page": 5,
      "text": "Table 1. Architectures for ImageNet. Building blocks are shown in brackets (see also Fig. 5), with the numbers of blocks stacked. Down-\nsampling is performed by conv3_1, conv4_1, and conv5_1 with a stride of 2."
    },
    {
      "bounding_box": [
        {
          "x": 353,
          "y": 1046
        },
        {
          "x": 2132,
          "y": 1046
        },
        {
          "x": 2132,
          "y": 1623
        },
        {
          "x": 353,
          "y": 1623
        }
      ],
      "category": "figure",
      "html": "<figure><img id='66' style='font-size:14px' alt=\"60 60\n50 50\n(%) (%)\nerror 40- 40\n34-layer error\n18-layer\n30 30 ~\n18-layer\nplain-18 ResNet-18\nVW\nplain-34 ResNet-34 34-layer\n200 10 20 30 40 50 0 10 20 30 40 50\n20\niter. (1e4) iter. (1e4)\" data-coord=\"top-left:(353,1046); bottom-right:(2132,1623)\" /></figure>",
      "id": 66,
      "page": 5,
      "text": "60 60\n50 50\n(%) (%)\nerror 40- 40\n34-layer error\n18-layer\n30 30 ~\n18-layer\nplain-18 ResNet-18\nVW\nplain-34 ResNet-34 34-layer\n200 10 20 30 40 50 0 10 20 30 40 50\n20\niter. (1e4) iter. (1e4)"
    },
    {
      "bounding_box": [
        {
          "x": 200,
          "y": 1633
        },
        {
          "x": 2277,
          "y": 1633
        },
        {
          "x": 2277,
          "y": 1768
        },
        {
          "x": 200,
          "y": 1768
        }
      ],
      "category": "caption",
      "html": "<br><caption id='67' style='font-size:16px'>Figure 4. Training on ImageNet. Thin curves denote training error, and bold curves denote validation error of the center crops. Left: plain<br>networks of 18 and 34 layers. Right: ResNets of 18 and 34 layers. In this plot, the residual networks have no extra parameter compared to<br>their plain counterparts.</caption>",
      "id": 67,
      "page": 5,
      "text": "Figure 4. Training on ImageNet. Thin curves denote training error, and bold curves denote validation error of the center crops. Left: plain\nnetworks of 18 and 34 layers. Right: ResNets of 18 and 34 layers. In this plot, the residual networks have no extra parameter compared to\ntheir plain counterparts."
    },
    {
      "bounding_box": [
        {
          "x": 386,
          "y": 1843
        },
        {
          "x": 1007,
          "y": 1843
        },
        {
          "x": 1007,
          "y": 2001
        },
        {
          "x": 386,
          "y": 2001
        }
      ],
      "category": "table",
      "html": "<table id='68' style='font-size:18px'><tr><td></td><td>plain</td><td>ResNet</td></tr><tr><td>18 layers</td><td>27.94</td><td>27.88</td></tr><tr><td>34 layers</td><td>28.54</td><td>25.03</td></tr></table>",
      "id": 68,
      "page": 5,
      "text": "plain ResNet\n 18 layers 27.94 27.88\n 34 layers 28.54"
    },
    {
      "bounding_box": [
        {
          "x": 202,
          "y": 2022
        },
        {
          "x": 1198,
          "y": 2022
        },
        {
          "x": 1198,
          "y": 2156
        },
        {
          "x": 202,
          "y": 2156
        }
      ],
      "category": "caption",
      "html": "<br><caption id='69' style='font-size:18px'>Table 2. Top-1 error (%, 10-crop testing) on ImageNet validation.<br>Here the ResNets have no extra parameter compared to their plain<br>counterparts. Fig. 4 shows the training procedures.</caption>",
      "id": 69,
      "page": 5,
      "text": "Table 2. Top-1 error (%, 10-crop testing) on ImageNet validation.\nHere the ResNets have no extra parameter compared to their plain\ncounterparts. Fig. 4 shows the training procedures."
    },
    {
      "bounding_box": [
        {
          "x": 201,
          "y": 2269
        },
        {
          "x": 1198,
          "y": 2269
        },
        {
          "x": 1198,
          "y": 2459
        },
        {
          "x": 201,
          "y": 2459
        }
      ],
      "category": "paragraph",
      "html": "<p id='70' style='font-size:20px'>34-layer plain net has higher training error throughout the<br>whole training procedure, even though the solution space<br>of the 18-layer plain network is a subspace of that of the<br>34-layer one.</p>",
      "id": 70,
      "page": 5,
      "text": "34-layer plain net has higher training error throughout the\nwhole training procedure, even though the solution space\nof the 18-layer plain network is a subspace of that of the\n34-layer one."
    },
    {
      "bounding_box": [
        {
          "x": 202,
          "y": 2479
        },
        {
          "x": 1199,
          "y": 2479
        },
        {
          "x": 1199,
          "y": 2976
        },
        {
          "x": 202,
          "y": 2976
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='71' style='font-size:20px'>We argue that this optimization difficulty is unlikely to<br>be caused by vanishing gradients. These plain networks are<br>trained with BN [16], which ensures forward propagated<br>signals to have non-zero variances. We also verify that the<br>backward propagated gradients exhibit healthy norms with<br>BN. So neither forward nor backward signals vanish. In<br>fact, the 34-layer plain net is still able to achieve compet-<br>itive accuracy (Table 3), suggesting that the solver works<br>to some extent. We conjecture that the deep plain nets may<br>have exponentially low convergence rates, which impact the</p>",
      "id": 71,
      "page": 5,
      "text": "We argue that this optimization difficulty is unlikely to\nbe caused by vanishing gradients. These plain networks are\ntrained with BN [16], which ensures forward propagated\nsignals to have non-zero variances. We also verify that the\nbackward propagated gradients exhibit healthy norms with\nBN. So neither forward nor backward signals vanish. In\nfact, the 34-layer plain net is still able to achieve compet-\nitive accuracy (Table 3), suggesting that the solver works\nto some extent. We conjecture that the deep plain nets may\nhave exponentially low convergence rates, which impact the"
    },
    {
      "bounding_box": [
        {
          "x": 1282,
          "y": 1854
        },
        {
          "x": 2273,
          "y": 1854
        },
        {
          "x": 2273,
          "y": 1947
        },
        {
          "x": 1282,
          "y": 1947
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='72' style='font-size:20px'>reducing of the training error3. The reason for such opti-<br>mization difficulties will be studied in the future.</p>",
      "id": 72,
      "page": 5,
      "text": "reducing of the training error3. The reason for such opti-\nmization difficulties will be studied in the future."
    },
    {
      "bounding_box": [
        {
          "x": 1280,
          "y": 1978
        },
        {
          "x": 2275,
          "y": 1978
        },
        {
          "x": 2275,
          "y": 2371
        },
        {
          "x": 1280,
          "y": 2371
        }
      ],
      "category": "paragraph",
      "html": "<p id='73' style='font-size:20px'>Residual Networks. Next we evaluate 18-layer and 34-<br>layer residual nets (ResNets). The baseline architectures<br>are the same as the above plain nets, expect that a shortcut<br>connection is added to each pair of 3x3 filters as in Fig. 3<br>(right). In the first comparison (Table 2 and Fig. 4 right),<br>we use identity mapping for all shortcuts and zero-padding<br>for increasing dimensions (option A). So they have no extra<br>parameter compared to the plain counterparts.</p>",
      "id": 73,
      "page": 5,
      "text": "Residual Networks. Next we evaluate 18-layer and 34-\nlayer residual nets (ResNets). The baseline architectures\nare the same as the above plain nets, expect that a shortcut\nconnection is added to each pair of 3x3 filters as in Fig. 3\n(right). In the first comparison (Table 2 and Fig. 4 right),\nwe use identity mapping for all shortcuts and zero-padding\nfor increasing dimensions (option A). So they have no extra\nparameter compared to the plain counterparts."
    },
    {
      "bounding_box": [
        {
          "x": 1280,
          "y": 2378
        },
        {
          "x": 2276,
          "y": 2378
        },
        {
          "x": 2276,
          "y": 2769
        },
        {
          "x": 1280,
          "y": 2769
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='74' style='font-size:20px'>We have three major observations from Table 2 and<br>Fig. 4. First, the situation is reversed with residual learn-<br>ing - the 34-layer ResNet is better than the 18-layer ResNet<br>(by 2.8%). More importantly, the 34-layer ResNet exhibits<br>considerably lower training error and is generalizable to the<br>validation data. This indicates that the degradation problem<br>is well addressed in this setting and we manage to obtain<br>accuracy gains from increased depth.</p>",
      "id": 74,
      "page": 5,
      "text": "We have three major observations from Table 2 and\nFig. 4. First, the situation is reversed with residual learn-\ning - the 34-layer ResNet is better than the 18-layer ResNet\n(by 2.8%). More importantly, the 34-layer ResNet exhibits\nconsiderably lower training error and is generalizable to the\nvalidation data. This indicates that the degradation problem\nis well addressed in this setting and we manage to obtain\naccuracy gains from increased depth."
    },
    {
      "bounding_box": [
        {
          "x": 1332,
          "y": 2778
        },
        {
          "x": 2274,
          "y": 2778
        },
        {
          "x": 2274,
          "y": 2819
        },
        {
          "x": 1332,
          "y": 2819
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='75' style='font-size:22px'>Second, compared to its plain counterpart, the 34-layer</p>",
      "id": 75,
      "page": 5,
      "text": "Second, compared to its plain counterpart, the 34-layer"
    },
    {
      "bounding_box": [
        {
          "x": 1283,
          "y": 2856
        },
        {
          "x": 2274,
          "y": 2856
        },
        {
          "x": 2274,
          "y": 2972
        },
        {
          "x": 1283,
          "y": 2972
        }
      ],
      "category": "paragraph",
      "html": "<p id='76' style='font-size:16px'>3We have experimented with more training iterations (3x) and still ob-<br>served the degradation problem, suggesting that this problem cannot be<br>feasibly addressed by simply using more iterations.</p>",
      "id": 76,
      "page": 5,
      "text": "3We have experimented with more training iterations (3x) and still ob-\nserved the degradation problem, suggesting that this problem cannot be\nfeasibly addressed by simply using more iterations."
    },
    {
      "bounding_box": [
        {
          "x": 1226,
          "y": 3056
        },
        {
          "x": 1251,
          "y": 3056
        },
        {
          "x": 1251,
          "y": 3090
        },
        {
          "x": 1226,
          "y": 3090
        }
      ],
      "category": "footer",
      "html": "<footer id='77' style='font-size:20px'>5</footer>",
      "id": 77,
      "page": 5,
      "text": "5"
    },
    {
      "bounding_box": [
        {
          "x": 358,
          "y": 294
        },
        {
          "x": 1041,
          "y": 294
        },
        {
          "x": 1041,
          "y": 877
        },
        {
          "x": 358,
          "y": 877
        }
      ],
      "category": "table",
      "html": "<table id='78' style='font-size:14px'><tr><td>model</td><td>top-1 err.</td><td>top-5 err.</td></tr><tr><td>VGG-16 [41]</td><td>28.07</td><td>9.33</td></tr><tr><td>GoogLeNet [44]</td><td>-</td><td>9.15</td></tr><tr><td>PReLU-net [13]</td><td>24.27</td><td>7.38</td></tr><tr><td>plain-34</td><td>28.54</td><td>10.02</td></tr><tr><td>ResNet-34 A</td><td>25.03</td><td>7.76</td></tr><tr><td>ResNet-34 B</td><td>24.52</td><td>7.46</td></tr><tr><td>ResNet-34 C</td><td>24.19</td><td>7.40</td></tr><tr><td>ResNet-50</td><td>22.85</td><td>6.71</td></tr><tr><td>ResNet-101</td><td>21.75</td><td>6.05</td></tr><tr><td>ResNet-152</td><td>21.43</td><td>5.71</td></tr></table>",
      "id": 78,
      "page": 6,
      "text": "model top-1 err. top-5 err.\n VGG-16 [41] 28.07 9.33\n GoogLeNet [44] - 9.15\n PReLU-net [13] 24.27 7.38\n plain-34 28.54 10.02\n ResNet-34 A 25.03 7.76\n ResNet-34 B 24.52 7.46\n ResNet-34 C 24.19 7.40\n ResNet-50 22.85 6.71\n ResNet-101 21.75 6.05\n ResNet-152 21.43"
    },
    {
      "bounding_box": [
        {
          "x": 204,
          "y": 891
        },
        {
          "x": 1195,
          "y": 891
        },
        {
          "x": 1195,
          "y": 1022
        },
        {
          "x": 204,
          "y": 1022
        }
      ],
      "category": "caption",
      "html": "<br><caption id='79' style='font-size:16px'>Table 3. Error rates (%, 10-crop testing) on ImageNet validation.<br>VGG-16 is based on our test. ResNet-50/101/152 are of option B<br>that only uses projections for increasing dimensions.</caption>",
      "id": 79,
      "page": 6,
      "text": "Table 3. Error rates (%, 10-crop testing) on ImageNet validation.\nVGG-16 is based on our test. ResNet-50/101/152 are of option B\nthat only uses projections for increasing dimensions."
    },
    {
      "bounding_box": [
        {
          "x": 241,
          "y": 1055
        },
        {
          "x": 1164,
          "y": 1055
        },
        {
          "x": 1164,
          "y": 1625
        },
        {
          "x": 241,
          "y": 1625
        }
      ],
      "category": "table",
      "html": "<table id='80' style='font-size:16px'><tr><td>method</td><td>top-1 err.</td><td>top-5 err.</td></tr><tr><td>VGG [41] (ILSVRC'14)</td><td>-</td><td>8.43t</td></tr><tr><td>GoogLeNet [44] (ILSVRC'14)</td><td>-</td><td>7.89</td></tr><tr><td>VGG [41] (v5)</td><td>24.4</td><td>7.1</td></tr><tr><td>PReLU-net [13]</td><td>21.59</td><td>5.71</td></tr><tr><td>BN-inception [16]</td><td>21.99</td><td>5.81</td></tr><tr><td>ResNet-34 B</td><td>21.84</td><td>5.71</td></tr><tr><td>ResNet-34 C</td><td>21.53</td><td>5.60</td></tr><tr><td>ResNet-50</td><td>20.74</td><td>5.25</td></tr><tr><td>ResNet-101</td><td>19.87</td><td>4.60</td></tr><tr><td>ResNet-152</td><td>19.38</td><td>4.49</td></tr></table>",
      "id": 80,
      "page": 6,
      "text": "method top-1 err. top-5 err.\n VGG [41] (ILSVRC'14) - 8.43t\n GoogLeNet [44] (ILSVRC'14) - 7.89\n VGG [41] (v5) 24.4 7.1\n PReLU-net [13] 21.59 5.71\n BN-inception [16] 21.99 5.81\n ResNet-34 B 21.84 5.71\n ResNet-34 C 21.53 5.60\n ResNet-50 20.74 5.25\n ResNet-101 19.87 4.60\n ResNet-152 19.38"
    },
    {
      "bounding_box": [
        {
          "x": 206,
          "y": 1644
        },
        {
          "x": 1194,
          "y": 1644
        },
        {
          "x": 1194,
          "y": 1731
        },
        {
          "x": 206,
          "y": 1731
        }
      ],
      "category": "caption",
      "html": "<br><caption id='81' style='font-size:16px'>Table 4. Error rates (%) of single-model results on the ImageNet<br>t<br>validation set (except reported on the test set).</caption>",
      "id": 81,
      "page": 6,
      "text": "Table 4. Error rates (%) of single-model results on the ImageNet\nt\nvalidation set (except reported on the test set)."
    },
    {
      "bounding_box": [
        {
          "x": 253,
          "y": 1769
        },
        {
          "x": 1154,
          "y": 1769
        },
        {
          "x": 1154,
          "y": 2138
        },
        {
          "x": 253,
          "y": 2138
        }
      ],
      "category": "table",
      "html": "<table id='82' style='font-size:18px'><tr><td>method</td><td>top-5 err. (test)</td></tr><tr><td>VGG [41] (ILSVRC'14)</td><td>7.32</td></tr><tr><td>GoogLeNet [44] (ILSVRC'14)</td><td>6.66</td></tr><tr><td>VGG [41] (v5)</td><td>6.8</td></tr><tr><td>PReLU-net [13]</td><td>4.94</td></tr><tr><td>BN-inception [16]</td><td>4.82</td></tr><tr><td>ResNet (ILSVRC'15)</td><td>3.57</td></tr></table>",
      "id": 82,
      "page": 6,
      "text": "method top-5 err. (test)\n VGG [41] (ILSVRC'14) 7.32\n GoogLeNet [44] (ILSVRC'14) 6.66\n VGG [41] (v5) 6.8\n PReLU-net [13] 4.94\n BN-inception [16] 4.82\n ResNet (ILSVRC'15)"
    },
    {
      "bounding_box": [
        {
          "x": 205,
          "y": 2157
        },
        {
          "x": 1194,
          "y": 2157
        },
        {
          "x": 1194,
          "y": 2243
        },
        {
          "x": 205,
          "y": 2243
        }
      ],
      "category": "caption",
      "html": "<br><caption id='83' style='font-size:16px'>Table 5. Error rates (%) of ensembles. The top-5 error is on the<br>test set of ImageNet and reported by the test server.</caption>",
      "id": 83,
      "page": 6,
      "text": "Table 5. Error rates (%) of ensembles. The top-5 error is on the\ntest set of ImageNet and reported by the test server."
    },
    {
      "bounding_box": [
        {
          "x": 204,
          "y": 2345
        },
        {
          "x": 1197,
          "y": 2345
        },
        {
          "x": 1197,
          "y": 2538
        },
        {
          "x": 204,
          "y": 2538
        }
      ],
      "category": "paragraph",
      "html": "<p id='84' style='font-size:20px'>ResNet reduces the top-1 error by 3.5% (Table 2), resulting<br>from the successfully reduced training error (Fig. 4 right vs.<br>left). This comparison verifies the effectiveness of residual<br>learning on extremely deep systems.</p>",
      "id": 84,
      "page": 6,
      "text": "ResNet reduces the top-1 error by 3.5% (Table 2), resulting\nfrom the successfully reduced training error (Fig. 4 right vs.\nleft). This comparison verifies the effectiveness of residual\nlearning on extremely deep systems."
    },
    {
      "bounding_box": [
        {
          "x": 202,
          "y": 2551
        },
        {
          "x": 1199,
          "y": 2551
        },
        {
          "x": 1199,
          "y": 2894
        },
        {
          "x": 202,
          "y": 2894
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='85' style='font-size:20px'>Last, we also note that the 18-layer plain/residual nets<br>are comparably accurate (Table 2), but the 18-layer ResNet<br>converges faster (Fig. 4 right vs. left). When the net is \"not<br>overly deep\" (18 layers here), the current SGD solveris still<br>able to find good solutions to the plain net. In this case, the<br>ResNet eases the optimization by providing faster conver-<br>gence at the early stage.</p>",
      "id": 85,
      "page": 6,
      "text": "Last, we also note that the 18-layer plain/residual nets\nare comparably accurate (Table 2), but the 18-layer ResNet\nconverges faster (Fig. 4 right vs. left). When the net is \"not\noverly deep\" (18 layers here), the current SGD solveris still\nable to find good solutions to the plain net. In this case, the\nResNet eases the optimization by providing faster conver-\ngence at the early stage."
    },
    {
      "bounding_box": [
        {
          "x": 205,
          "y": 2929
        },
        {
          "x": 1193,
          "y": 2929
        },
        {
          "x": 1193,
          "y": 2971
        },
        {
          "x": 205,
          "y": 2971
        }
      ],
      "category": "paragraph",
      "html": "<p id='86' style='font-size:20px'>Identity vs. Projection Shortcuts. We have shown that</p>",
      "id": 86,
      "page": 6,
      "text": "Identity vs. Projection Shortcuts. We have shown that"
    },
    {
      "bounding_box": [
        {
          "x": 1384,
          "y": 289
        },
        {
          "x": 2229,
          "y": 289
        },
        {
          "x": 2229,
          "y": 603
        },
        {
          "x": 1384,
          "y": 603
        }
      ],
      "category": "figure",
      "html": "<br><figure><img id='87' style='font-size:14px' alt=\"64-d 256-d\n3x3, 64 1x1, 64\nrelu\nrelu\n3x3, 64\nrelu\n3x3, 64\n1x1, 256\n+ +\nrelu relu\" data-coord=\"top-left:(1384,289); bottom-right:(2229,603)\" /></figure>",
      "id": 87,
      "page": 6,
      "text": "64-d 256-d\n3x3, 64 1x1, 64\nrelu\nrelu\n3x3, 64\nrelu\n3x3, 64\n1x1, 256\n+ +\nrelu relu"
    },
    {
      "bounding_box": [
        {
          "x": 1282,
          "y": 651
        },
        {
          "x": 2275,
          "y": 651
        },
        {
          "x": 2275,
          "y": 785
        },
        {
          "x": 1282,
          "y": 785
        }
      ],
      "category": "caption",
      "html": "<caption id='88' style='font-size:16px'>Figure 5. A deeper residual function F for ImageNet. Left: a<br>building block (on 56x56 feature maps) as in Fig. 3 for ResNet-<br>34. Right: a \"bottleneck\" building block for ResNet-50/101/152.</caption>",
      "id": 88,
      "page": 6,
      "text": "Figure 5. A deeper residual function F for ImageNet. Left: a\nbuilding block (on 56x56 feature maps) as in Fig. 3 for ResNet-\n34. Right: a \"bottleneck\" building block for ResNet-50/101/152."
    },
    {
      "bounding_box": [
        {
          "x": 1281,
          "y": 855
        },
        {
          "x": 2274,
          "y": 855
        },
        {
          "x": 2274,
          "y": 1197
        },
        {
          "x": 1281,
          "y": 1197
        }
      ],
      "category": "paragraph",
      "html": "<p id='89' style='font-size:20px'>parameter-free, identity shortcuts help with training. Next<br>we investigate projection shortcuts (Eqn.(2)). In Table 3 we<br>compare three options: (A) zero-padding shortcuts are used<br>for increasing dimensions, and all shortcuts are parameter-<br>free (the same as Table 2 and Fig. 4 right); (B) projec-<br>tion shortcuts are used for increasing dimensions, and other<br>shortcuts are identity; and (C) all shortcuts are projections.</p>",
      "id": 89,
      "page": 6,
      "text": "parameter-free, identity shortcuts help with training. Next\nwe investigate projection shortcuts (Eqn.(2)). In Table 3 we\ncompare three options: (A) zero-padding shortcuts are used\nfor increasing dimensions, and all shortcuts are parameter-\nfree (the same as Table 2 and Fig. 4 right); (B) projec-\ntion shortcuts are used for increasing dimensions, and other\nshortcuts are identity; and (C) all shortcuts are projections."
    },
    {
      "bounding_box": [
        {
          "x": 1278,
          "y": 1207
        },
        {
          "x": 2275,
          "y": 1207
        },
        {
          "x": 2275,
          "y": 1800
        },
        {
          "x": 1278,
          "y": 1800
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='90' style='font-size:20px'>Table 3 shows that all three options are considerably bet-<br>ter than the plain counterpart. B is slightly better than A. We<br>argue that this is because the zero-padded dimensions in A<br>indeed have no residual learning. Cis marginally better than<br>B, and we attribute this to the extra parameters introduced<br>by many (thirteen) projection shortcuts. But the small dif-<br>ferences among A/B/C indicate that projection shortcuts are<br>not essential for addressing the degradation problem. So we<br>do not use option C in the rest of this paper, to reduce mem-<br>ory/time complexity and model sizes. Identity shortcuts are<br>particularly important for not increasing the complexity of<br>the bottleneck architectures that are introduced below.</p>",
      "id": 90,
      "page": 6,
      "text": "Table 3 shows that all three options are considerably bet-\nter than the plain counterpart. B is slightly better than A. We\nargue that this is because the zero-padded dimensions in A\nindeed have no residual learning. Cis marginally better than\nB, and we attribute this to the extra parameters introduced\nby many (thirteen) projection shortcuts. But the small dif-\nferences among A/B/C indicate that projection shortcuts are\nnot essential for addressing the degradation problem. So we\ndo not use option C in the rest of this paper, to reduce mem-\nory/time complexity and model sizes. Identity shortcuts are\nparticularly important for not increasing the complexity of\nthe bottleneck architectures that are introduced below."
    },
    {
      "bounding_box": [
        {
          "x": 1280,
          "y": 1831
        },
        {
          "x": 2275,
          "y": 1831
        },
        {
          "x": 2275,
          "y": 2325
        },
        {
          "x": 1280,
          "y": 2325
        }
      ],
      "category": "paragraph",
      "html": "<p id='91' style='font-size:18px'>Deeper Bottleneck Architectures. Next we describe our<br>deeper nets for ImageNet. Because of concerns on the train-<br>ing time that we can afford, we modify the building block<br>as a bottleneck design4 For each residual function F, we<br>use a stack of 3 layers instead of 2 (Fig. 5). The three layers<br>are 1 x1, 3x3, and 1 x 1 convolutions, where the 1 x 1 layers<br>are responsible for reducing and then increasing (restoring)<br>dimensions, leaving the 3x3 layer a bottleneck with smaller<br>input/output dimensions. Fig. 5 shows an example, where<br>both designs have similar time complexity.</p>",
      "id": 91,
      "page": 6,
      "text": "Deeper Bottleneck Architectures. Next we describe our\ndeeper nets for ImageNet. Because of concerns on the train-\ning time that we can afford, we modify the building block\nas a bottleneck design4 For each residual function F, we\nuse a stack of 3 layers instead of 2 (Fig. 5). The three layers\nare 1 x1, 3x3, and 1 x 1 convolutions, where the 1 x 1 layers\nare responsible for reducing and then increasing (restoring)\ndimensions, leaving the 3x3 layer a bottleneck with smaller\ninput/output dimensions. Fig. 5 shows an example, where\nboth designs have similar time complexity."
    },
    {
      "bounding_box": [
        {
          "x": 1280,
          "y": 2335
        },
        {
          "x": 2276,
          "y": 2335
        },
        {
          "x": 2276,
          "y": 2674
        },
        {
          "x": 1280,
          "y": 2674
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='92' style='font-size:18px'>The parameter-free identity shortcuts are particularly im-<br>portant for the bottleneck architectures. If the identity short-<br>cut in Fig. 5 (right) is replaced with projection, one can<br>show that the time complexity and model size are doubled,<br>as the shortcut is connected to the two high-dimensional<br>ends. So identity shortcuts lead to more efficient models<br>for the bottleneck designs.</p>",
      "id": 92,
      "page": 6,
      "text": "The parameter-free identity shortcuts are particularly im-\nportant for the bottleneck architectures. If the identity short-\ncut in Fig. 5 (right) is replaced with projection, one can\nshow that the time complexity and model size are doubled,\nas the shortcut is connected to the two high-dimensional\nends. So identity shortcuts lead to more efficient models\nfor the bottleneck designs."
    },
    {
      "bounding_box": [
        {
          "x": 1332,
          "y": 2685
        },
        {
          "x": 2274,
          "y": 2685
        },
        {
          "x": 2274,
          "y": 2727
        },
        {
          "x": 1332,
          "y": 2727
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='93' style='font-size:22px'>50-layer ResNet: We replace each 2-layer block in the</p>",
      "id": 93,
      "page": 6,
      "text": "50-layer ResNet: We replace each 2-layer block in the"
    },
    {
      "bounding_box": [
        {
          "x": 1281,
          "y": 2776
        },
        {
          "x": 2277,
          "y": 2776
        },
        {
          "x": 2277,
          "y": 2970
        },
        {
          "x": 1281,
          "y": 2970
        }
      ],
      "category": "paragraph",
      "html": "<p id='94' style='font-size:14px'>4Deeper non-bottleneck ResNets (e.g., Fig. 5 left) also gain accuracy<br>from increased depth (as shown on CIFAR-10), but are not as economical<br>as the bottleneck ResNets. So the usage of bottleneck designs is mainly due<br>to practical considerations. We further note that the degradation problem<br>of plain nets is also witnessed for the bottleneck designs.</p>",
      "id": 94,
      "page": 6,
      "text": "4Deeper non-bottleneck ResNets (e.g., Fig. 5 left) also gain accuracy\nfrom increased depth (as shown on CIFAR-10), but are not as economical\nas the bottleneck ResNets. So the usage of bottleneck designs is mainly due\nto practical considerations. We further note that the degradation problem\nof plain nets is also witnessed for the bottleneck designs."
    },
    {
      "bounding_box": [
        {
          "x": 1226,
          "y": 3058
        },
        {
          "x": 1253,
          "y": 3058
        },
        {
          "x": 1253,
          "y": 3090
        },
        {
          "x": 1226,
          "y": 3090
        }
      ],
      "category": "footer",
      "html": "<footer id='95' style='font-size:16px'>6</footer>",
      "id": 95,
      "page": 6,
      "text": "6"
    },
    {
      "bounding_box": [
        {
          "x": 202,
          "y": 308
        },
        {
          "x": 1199,
          "y": 308
        },
        {
          "x": 1199,
          "y": 451
        },
        {
          "x": 202,
          "y": 451
        }
      ],
      "category": "paragraph",
      "html": "<p id='96' style='font-size:20px'>34-layer net with this 3-layer bottleneck block, resulting in<br>a 50-layer ResNet (Table 1). We use option B for increasing<br>dimensions. This model has 3.8 billion FLOPs.</p>",
      "id": 96,
      "page": 7,
      "text": "34-layer net with this 3-layer bottleneck block, resulting in\na 50-layer ResNet (Table 1). We use option B for increasing\ndimensions. This model has 3.8 billion FLOPs."
    },
    {
      "bounding_box": [
        {
          "x": 203,
          "y": 462
        },
        {
          "x": 1199,
          "y": 462
        },
        {
          "x": 1199,
          "y": 751
        },
        {
          "x": 203,
          "y": 751
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='97' style='font-size:22px'>101-layer and 152-layer ResNets: We construct 101-<br>layer and 152-layer ResNets by using more 3-layer blocks<br>(Table 1). Remarkably, although the depth is significantly<br>increased, the 152-layer ResNet (11.3 billion FLOPs) still<br>has lower complexity than VGG-16/19 nets (15.3/19.6 bil-<br>lion FLOPs).</p>",
      "id": 97,
      "page": 7,
      "text": "101-layer and 152-layer ResNets: We construct 101-\nlayer and 152-layer ResNets by using more 3-layer blocks\n(Table 1). Remarkably, although the depth is significantly\nincreased, the 152-layer ResNet (11.3 billion FLOPs) still\nhas lower complexity than VGG-16/19 nets (15.3/19.6 bil-\nlion FLOPs)."
    },
    {
      "bounding_box": [
        {
          "x": 202,
          "y": 760
        },
        {
          "x": 1200,
          "y": 760
        },
        {
          "x": 1200,
          "y": 1054
        },
        {
          "x": 202,
          "y": 1054
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='98' style='font-size:20px'>The 50/101/152-layer ResNets are more accurate than<br>the 34-layer ones by considerable margins (Table 3 and 4).<br>We do not observe the degradation problem and thus en-<br>joy significant accuracy gains from considerably increased<br>depth. The benefits of depth are witnessed for all evaluation<br>metrics (Table 3 and 4).</p>",
      "id": 98,
      "page": 7,
      "text": "The 50/101/152-layer ResNets are more accurate than\nthe 34-layer ones by considerable margins (Table 3 and 4).\nWe do not observe the degradation problem and thus en-\njoy significant accuracy gains from considerably increased\ndepth. The benefits of depth are witnessed for all evaluation\nmetrics (Table 3 and 4)."
    },
    {
      "bounding_box": [
        {
          "x": 202,
          "y": 1084
        },
        {
          "x": 1200,
          "y": 1084
        },
        {
          "x": 1200,
          "y": 1580
        },
        {
          "x": 202,
          "y": 1580
        }
      ],
      "category": "paragraph",
      "html": "<p id='99' style='font-size:18px'>Comparisons with State-of-the-art Methods. In Table 4<br>we compare with the previous best single-model results.<br>Our baseline 34-layer ResNets have achieved very compet-<br>itive accuracy. Our 152-layer ResNet has a single-model<br>top-5 validation error of 4.49%. This single-model result<br>outperforms all previous ensemble results (Table 5). We<br>combine six models of different depth to form an ensemble<br>(only with two 152-layer ones at the time of submitting).<br>This leads to 3.57% top-5 error on the test set (Table 5).<br>This entry won the 1st place in ILSVRC 2015.</p>",
      "id": 99,
      "page": 7,
      "text": "Comparisons with State-of-the-art Methods. In Table 4\nwe compare with the previous best single-model results.\nOur baseline 34-layer ResNets have achieved very compet-\nitive accuracy. Our 152-layer ResNet has a single-model\ntop-5 validation error of 4.49%. This single-model result\noutperforms all previous ensemble results (Table 5). We\ncombine six models of different depth to form an ensemble\n(only with two 152-layer ones at the time of submitting).\nThis leads to 3.57% top-5 error on the test set (Table 5).\nThis entry won the 1st place in ILSVRC 2015."
    },
    {
      "bounding_box": [
        {
          "x": 205,
          "y": 1619
        },
        {
          "x": 754,
          "y": 1619
        },
        {
          "x": 754,
          "y": 1666
        },
        {
          "x": 205,
          "y": 1666
        }
      ],
      "category": "paragraph",
      "html": "<p id='100' style='font-size:22px'>4.2. CIFAR-10 and Analysis</p>",
      "id": 100,
      "page": 7,
      "text": "4.2. CIFAR-10 and Analysis"
    },
    {
      "bounding_box": [
        {
          "x": 203,
          "y": 1699
        },
        {
          "x": 1200,
          "y": 1699
        },
        {
          "x": 1200,
          "y": 2043
        },
        {
          "x": 203,
          "y": 2043
        }
      ],
      "category": "paragraph",
      "html": "<p id='101' style='font-size:18px'>We conducted more studies on the CIFAR-10 dataset<br>[20], which consists of 50k training images and 10k test-<br>ing images in 10 classes. We present experiments trained<br>on the training set and evaluated on the test set. Our focus<br>is on the behaviors of extremely deep networks, but not on<br>pushing the state-of-the-art results, SO we intentionally use<br>simple architectures as follows.</p>",
      "id": 101,
      "page": 7,
      "text": "We conducted more studies on the CIFAR-10 dataset\n[20], which consists of 50k training images and 10k test-\ning images in 10 classes. We present experiments trained\non the training set and evaluated on the test set. Our focus\nis on the behaviors of extremely deep networks, but not on\npushing the state-of-the-art results, SO we intentionally use\nsimple architectures as follows."
    },
    {
      "bounding_box": [
        {
          "x": 202,
          "y": 2050
        },
        {
          "x": 1198,
          "y": 2050
        },
        {
          "x": 1198,
          "y": 2595
        },
        {
          "x": 202,
          "y": 2595
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='102' style='font-size:20px'>The plain/residual architectures follow the form in Fig. 3<br>(middle/right). The network inputs are 32x32 images, with<br>the per-pixel mean subtracted. The first layer is 3x3 convo-<br>lutions. Then we use a stack of 6n layers with 3x3 convo-<br>lutions on the feature maps of sizes {32, 16, 8} respectively,<br>with 2n layers for each feature map size. The numbers of<br>filters are {16, 32, 64} respectively. The subsampling is per-<br>formed by convolutions with a stride of2. The network ends<br>with a global average pooling, a 10-way fully-connected<br>layer, and softmax. There are totally 6n+2 stacked weighted<br>layers. The following table summarizes the architecture:</p>",
      "id": 102,
      "page": 7,
      "text": "The plain/residual architectures follow the form in Fig. 3\n(middle/right). The network inputs are 32x32 images, with\nthe per-pixel mean subtracted. The first layer is 3x3 convo-\nlutions. Then we use a stack of 6n layers with 3x3 convo-\nlutions on the feature maps of sizes {32, 16, 8} respectively,\nwith 2n layers for each feature map size. The numbers of\nfilters are {16, 32, 64} respectively. The subsampling is per-\nformed by convolutions with a stride of2. The network ends\nwith a global average pooling, a 10-way fully-connected\nlayer, and softmax. There are totally 6n+2 stacked weighted\nlayers. The following table summarizes the architecture:"
    },
    {
      "bounding_box": [
        {
          "x": 314,
          "y": 2635
        },
        {
          "x": 1096,
          "y": 2635
        },
        {
          "x": 1096,
          "y": 2793
        },
        {
          "x": 314,
          "y": 2793
        }
      ],
      "category": "table",
      "html": "<table id='103' style='font-size:16px'><tr><td>output map size</td><td>32x32</td><td>16x 16</td><td>8x8</td></tr><tr><td># layers</td><td>1+2n</td><td>2n</td><td>2n</td></tr><tr><td># filters</td><td>16</td><td>32</td><td>64</td></tr></table>",
      "id": 103,
      "page": 7,
      "text": "output map size 32x32 16x 16 8x8\n # layers 1+2n 2n 2n\n # filters 16 32"
    },
    {
      "bounding_box": [
        {
          "x": 202,
          "y": 2828
        },
        {
          "x": 1198,
          "y": 2828
        },
        {
          "x": 1198,
          "y": 2976
        },
        {
          "x": 202,
          "y": 2976
        }
      ],
      "category": "paragraph",
      "html": "<p id='104' style='font-size:18px'>When shortcut connections are used, they are connected<br>to the pairs of 3x3 layers (totally 3n shortcuts). On this<br>dataset we use identity shortcuts in all cases (i.e., option A),</p>",
      "id": 104,
      "page": 7,
      "text": "When shortcut connections are used, they are connected\nto the pairs of 3x3 layers (totally 3n shortcuts). On this\ndataset we use identity shortcuts in all cases (i.e., option A),"
    },
    {
      "bounding_box": [
        {
          "x": 1287,
          "y": 295
        },
        {
          "x": 2268,
          "y": 295
        },
        {
          "x": 2268,
          "y": 1019
        },
        {
          "x": 1287,
          "y": 1019
        }
      ],
      "category": "table",
      "html": "<br><table id='105' style='font-size:18px'><tr><td colspan=\"3\">method</td><td>error (%)</td></tr><tr><td colspan=\"3\">Maxout [10]</td><td>9.38</td></tr><tr><td colspan=\"3\">NIN [25]</td><td>8.81</td></tr><tr><td colspan=\"3\">DSN [24]</td><td>8.22</td></tr><tr><td></td><td># layers</td><td># params</td><td></td></tr><tr><td>FitNet [35]</td><td>19</td><td>2.5M</td><td>8.39</td></tr><tr><td>Highway [42, 43]</td><td>19</td><td>2.3M</td><td>7.54 (7.72±0.16)</td></tr><tr><td>Highway [42, 43]</td><td>32</td><td>1.25M</td><td>8.80</td></tr><tr><td>ResNet</td><td>20</td><td>0.27M</td><td>8.75</td></tr><tr><td>ResNet</td><td>32</td><td>0.46M</td><td>7.51</td></tr><tr><td>ResNet</td><td>44</td><td>0.66M</td><td>7.17</td></tr><tr><td>ResNet</td><td>56</td><td>0.85M</td><td>6.97</td></tr><tr><td>ResNet</td><td>110</td><td>1.7M</td><td>6.43 (6.61±0.16)</td></tr><tr><td>ResNet</td><td>1202</td><td>19.4M</td><td>7.93</td></tr></table>",
      "id": 105,
      "page": 7,
      "text": "method error (%)\n Maxout [10] 9.38\n NIN [25] 8.81\n DSN [24] 8.22\n  # layers # params \n FitNet [35] 19 2.5M 8.39\n Highway [42, 43] 19 2.3M 7.54 (7.72±0.16)\n Highway [42, 43] 32 1.25M 8.80\n ResNet 20 0.27M 8.75\n ResNet 32 0.46M 7.51\n ResNet 44 0.66M 7.17\n ResNet 56 0.85M 6.97\n ResNet 110 1.7M 6.43 (6.61±0.16)\n ResNet 1202 19.4M"
    },
    {
      "bounding_box": [
        {
          "x": 1280,
          "y": 1050
        },
        {
          "x": 2276,
          "y": 1050
        },
        {
          "x": 2276,
          "y": 1186
        },
        {
          "x": 1280,
          "y": 1186
        }
      ],
      "category": "caption",
      "html": "<caption id='106' style='font-size:14px'>Table 6. Classification error on the CIFAR-10 test set. All meth-<br>ods are with data augmentation. For ResNet-110, we run it 5 times<br>and show \"best (mean±std)\" as in [43].</caption>",
      "id": 106,
      "page": 7,
      "text": "Table 6. Classification error on the CIFAR-10 test set. All meth-\nods are with data augmentation. For ResNet-110, we run it 5 times\nand show \"best (mean±std)\" as in [43]."
    },
    {
      "bounding_box": [
        {
          "x": 1281,
          "y": 1273
        },
        {
          "x": 2274,
          "y": 1273
        },
        {
          "x": 2274,
          "y": 1362
        },
        {
          "x": 1281,
          "y": 1362
        }
      ],
      "category": "paragraph",
      "html": "<p id='107' style='font-size:18px'>SO our residual models have exactly the same depth, width,<br>and number of parameters as the plain counterparts.</p>",
      "id": 107,
      "page": 7,
      "text": "SO our residual models have exactly the same depth, width,\nand number of parameters as the plain counterparts."
    },
    {
      "bounding_box": [
        {
          "x": 1279,
          "y": 1368
        },
        {
          "x": 2276,
          "y": 1368
        },
        {
          "x": 2276,
          "y": 1912
        },
        {
          "x": 1279,
          "y": 1912
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='108' style='font-size:20px'>We use a weight decay of 0.0001 and momentum of 0.9,<br>and adopt the weight initialization in [13] and BN [16] but<br>with no dropout. These models are trained with a mini-<br>batch size of 128 on two GPUs. We start with a learning<br>rate of 0.1, divide it by 10 at 32k and 48k iterations, and<br>terminate training at 64k iterations, which is determined on<br>a 45k/5k train/val split. We follow the simple data augmen-<br>tation in [24] for training: 4 pixels are padded on each side,<br>and a 32x32 crop is randomly sampled from the padded<br>image or its horizontal flip. For testing, we only evaluate<br>the single view of the original 32x32 image.</p>",
      "id": 108,
      "page": 7,
      "text": "We use a weight decay of 0.0001 and momentum of 0.9,\nand adopt the weight initialization in [13] and BN [16] but\nwith no dropout. These models are trained with a mini-\nbatch size of 128 on two GPUs. We start with a learning\nrate of 0.1, divide it by 10 at 32k and 48k iterations, and\nterminate training at 64k iterations, which is determined on\na 45k/5k train/val split. We follow the simple data augmen-\ntation in [24] for training: 4 pixels are padded on each side,\nand a 32x32 crop is randomly sampled from the padded\nimage or its horizontal flip. For testing, we only evaluate\nthe single view of the original 32x32 image."
    },
    {
      "bounding_box": [
        {
          "x": 1280,
          "y": 1918
        },
        {
          "x": 2277,
          "y": 1918
        },
        {
          "x": 2277,
          "y": 2261
        },
        {
          "x": 1280,
          "y": 2261
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='109' style='font-size:20px'>We compare n = {3, 5, 7, 9}, leading to 20, 32, 44, and<br>56-layer networks. Fig. 6 (left) shows the behaviors of the<br>plain nets. The deep plain nets suffer from increased depth,<br>and exhibit higher training error when going deeper. This<br>phenomenon is similar to that on ImageNet (Fig. 4, left) and<br>on MNIST (see [42]), suggesting that such an optimization<br>difficulty is a fundamental problem.</p>",
      "id": 109,
      "page": 7,
      "text": "We compare n = {3, 5, 7, 9}, leading to 20, 32, 44, and\n56-layer networks. Fig. 6 (left) shows the behaviors of the\nplain nets. The deep plain nets suffer from increased depth,\nand exhibit higher training error when going deeper. This\nphenomenon is similar to that on ImageNet (Fig. 4, left) and\non MNIST (see [42]), suggesting that such an optimization\ndifficulty is a fundamental problem."
    },
    {
      "bounding_box": [
        {
          "x": 1280,
          "y": 2267
        },
        {
          "x": 2276,
          "y": 2267
        },
        {
          "x": 2276,
          "y": 2460
        },
        {
          "x": 1280,
          "y": 2460
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='110' style='font-size:20px'>Fig. 6 (middle) shows the behaviors of ResNets. Also<br>similar to the ImageNet cases (Fig. 4, right), our ResNets<br>manage to overcome the optimization difficulty and demon-<br>strate accuracy gains when the depth increases.</p>",
      "id": 110,
      "page": 7,
      "text": "Fig. 6 (middle) shows the behaviors of ResNets. Also\nsimilar to the ImageNet cases (Fig. 4, right), our ResNets\nmanage to overcome the optimization difficulty and demon-\nstrate accuracy gains when the depth increases."
    },
    {
      "bounding_box": [
        {
          "x": 1279,
          "y": 2466
        },
        {
          "x": 2277,
          "y": 2466
        },
        {
          "x": 2277,
          "y": 2864
        },
        {
          "x": 1279,
          "y": 2864
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='111' style='font-size:18px'>We further explore n = 18 that leads to a 110-layer<br>ResNet. In this case, we find that the initial learning rate<br>of 0.1 is slightly too large to start converging5. So we use<br>0.01 to warm up the training until the training error is below<br>80% (about 400 iterations), and then go back to 0.1 and con-<br>tinue training. The rest of the learning schedule is as done<br>previously. This 110-layer network converges well (Fig. 6,<br>middle). It has fewer parameters than other deep and thin</p>",
      "id": 111,
      "page": 7,
      "text": "We further explore n = 18 that leads to a 110-layer\nResNet. In this case, we find that the initial learning rate\nof 0.1 is slightly too large to start converging5. So we use\n0.01 to warm up the training until the training error is below\n80% (about 400 iterations), and then go back to 0.1 and con-\ntinue training. The rest of the learning schedule is as done\npreviously. This 110-layer network converges well (Fig. 6,\nmiddle). It has fewer parameters than other deep and thin"
    },
    {
      "bounding_box": [
        {
          "x": 1283,
          "y": 2893
        },
        {
          "x": 2274,
          "y": 2893
        },
        {
          "x": 2274,
          "y": 2972
        },
        {
          "x": 1283,
          "y": 2972
        }
      ],
      "category": "paragraph",
      "html": "<p id='112' style='font-size:14px'>5With an initial learning rate of 0.1, it starts converging (<90% error)<br>after several epochs, but still reaches similar accuracy.</p>",
      "id": 112,
      "page": 7,
      "text": "5With an initial learning rate of 0.1, it starts converging (<90% error)\nafter several epochs, but still reaches similar accuracy."
    },
    {
      "bounding_box": [
        {
          "x": 1225,
          "y": 3056
        },
        {
          "x": 1251,
          "y": 3056
        },
        {
          "x": 1251,
          "y": 3090
        },
        {
          "x": 1225,
          "y": 3090
        }
      ],
      "category": "footer",
      "html": "<footer id='113' style='font-size:16px'>7</footer>",
      "id": 113,
      "page": 7,
      "text": "7"
    },
    {
      "bounding_box": [
        {
          "x": 399,
          "y": 287
        },
        {
          "x": 2079,
          "y": 287
        },
        {
          "x": 2079,
          "y": 710
        },
        {
          "x": 399,
          "y": 710
        }
      ],
      "category": "figure",
      "html": "<figure><img id='114' style='font-size:14px' alt=\"20 20 20\nResNet-20 residual-110\nResNet-32 residual-1202\nResNet-44\nResNet-56\n56-layer ResNet-110\n(%)\n10 (%)\n10\n10 (%)\nerror\nerror\nerror\n20-layer\n20-layer\n110-layer\nplain-20\nplain-32\nplain-44\nplain-56\n1 2 3 4 5 6 :\n1 2 3 4 5 6 4 5 6\niter. (1e4) iter. (1e4) iter. (1e4)\" data-coord=\"top-left:(399,287); bottom-right:(2079,710)\" /></figure>",
      "id": 114,
      "page": 8,
      "text": "20 20 20\nResNet-20 residual-110\nResNet-32 residual-1202\nResNet-44\nResNet-56\n56-layer ResNet-110\n(%)\n10 (%)\n10\n10 (%)\nerror\nerror\nerror\n20-layer\n20-layer\n110-layer\nplain-20\nplain-32\nplain-44\nplain-56\n1 2 3 4 5 6 :\n1 2 3 4 5 6 4 5 6\niter. (1e4) iter. (1e4) iter. (1e4)"
    },
    {
      "bounding_box": [
        {
          "x": 201,
          "y": 712
        },
        {
          "x": 2275,
          "y": 712
        },
        {
          "x": 2275,
          "y": 806
        },
        {
          "x": 201,
          "y": 806
        }
      ],
      "category": "caption",
      "html": "<br><caption id='115' style='font-size:16px'>Figure 6. Training on CIFAR-10. Dashed lines denote training error, and bold lines denote testing error. Left: plain networks. The error<br>of plain-110 is higher than 60% and not displayed. Middle: ResNets. Right: ResNets with 110 and 1202 layers.</caption>",
      "id": 115,
      "page": 8,
      "text": "Figure 6. Training on CIFAR-10. Dashed lines denote training error, and bold lines denote testing error. Left: plain networks. The error\nof plain-110 is higher than 60% and not displayed. Middle: ResNets. Right: ResNets with 110 and 1202 layers."
    },
    {
      "bounding_box": [
        {
          "x": 239,
          "y": 877
        },
        {
          "x": 1161,
          "y": 877
        },
        {
          "x": 1161,
          "y": 1367
        },
        {
          "x": 239,
          "y": 1367
        }
      ],
      "category": "figure",
      "html": "<figure><img id='116' style='font-size:14px' alt=\"-- plain-20\nplain-56\nResNet-20\n2 ResNet-56\nResNet-110\n0 20 40 60 80 100\nlayer index (original)\nplain-20\n3\nplain-56\nResNet-20\npts 2 ResNet-56\nResNet-1 10\n0 20 40 60 80 100\nlayer index (sorted by magnitude)\" data-coord=\"top-left:(239,877); bottom-right:(1161,1367)\" /></figure>",
      "id": 116,
      "page": 8,
      "text": "-- plain-20\nplain-56\nResNet-20\n2 ResNet-56\nResNet-110\n0 20 40 60 80 100\nlayer index (original)\nplain-20\n3\nplain-56\nResNet-20\npts 2 ResNet-56\nResNet-1 10\n0 20 40 60 80 100\nlayer index (sorted by magnitude)"
    },
    {
      "bounding_box": [
        {
          "x": 201,
          "y": 1363
        },
        {
          "x": 1198,
          "y": 1363
        },
        {
          "x": 1198,
          "y": 1546
        },
        {
          "x": 201,
          "y": 1546
        }
      ],
      "category": "caption",
      "html": "<br><caption id='117' style='font-size:16px'>Figure 7. Standard deviations (std) of layer responses on CIFAR-<br>10. The responses are the outputs of each 3x3 layer, after BN and<br>before nonlinearity. Top: the layers are shown in their original<br>order. Bottom: the responses are ranked in descending order.</caption>",
      "id": 117,
      "page": 8,
      "text": "Figure 7. Standard deviations (std) of layer responses on CIFAR-\n10. The responses are the outputs of each 3x3 layer, after BN and\nbefore nonlinearity. Top: the layers are shown in their original\norder. Bottom: the responses are ranked in descending order."
    },
    {
      "bounding_box": [
        {
          "x": 203,
          "y": 1636
        },
        {
          "x": 1197,
          "y": 1636
        },
        {
          "x": 1197,
          "y": 1725
        },
        {
          "x": 203,
          "y": 1725
        }
      ],
      "category": "paragraph",
      "html": "<p id='118' style='font-size:20px'>networks such as FitNet [35] and Highway [42] (Table 6),<br>yet is among the state-of-the-art results (6.43%, Table 6).</p>",
      "id": 118,
      "page": 8,
      "text": "networks such as FitNet [35] and Highway [42] (Table 6),\nyet is among the state-of-the-art results (6.43%, Table 6)."
    },
    {
      "bounding_box": [
        {
          "x": 201,
          "y": 1755
        },
        {
          "x": 1197,
          "y": 1755
        },
        {
          "x": 1197,
          "y": 2452
        },
        {
          "x": 201,
          "y": 2452
        }
      ],
      "category": "paragraph",
      "html": "<p id='119' style='font-size:20px'>Analysis of Layer Responses. Fig. 7 shows the standard<br>deviations (std) of the layer responses. The responses are<br>the outputs of each 3x3 layer, after BN and before other<br>nonlinearity (ReLU/addition). For ResNets, this analy-<br>sis reveals the response strength of the residual functions.<br>Fig. 7 shows that ResNets have generally smaller responses<br>than their plain counterparts. These results support our ba-<br>sic motivation (Sec.3.1) that the residual functions might<br>be generally closer to zero than the non-residual functions.<br>We also notice that the deeper ResNet has smaller magni-<br>tudes of responses, as evidenced by the comparisons among<br>ResNet-20, 56, and 110 in Fig. 7. When there are more<br>layers, an individual layer of ResNets tends to modify the<br>signal less.</p>",
      "id": 119,
      "page": 8,
      "text": "Analysis of Layer Responses. Fig. 7 shows the standard\ndeviations (std) of the layer responses. The responses are\nthe outputs of each 3x3 layer, after BN and before other\nnonlinearity (ReLU/addition). For ResNets, this analy-\nsis reveals the response strength of the residual functions.\nFig. 7 shows that ResNets have generally smaller responses\nthan their plain counterparts. These results support our ba-\nsic motivation (Sec.3.1) that the residual functions might\nbe generally closer to zero than the non-residual functions.\nWe also notice that the deeper ResNet has smaller magni-\ntudes of responses, as evidenced by the comparisons among\nResNet-20, 56, and 110 in Fig. 7. When there are more\nlayers, an individual layer of ResNets tends to modify the\nsignal less."
    },
    {
      "bounding_box": [
        {
          "x": 202,
          "y": 2477
        },
        {
          "x": 1198,
          "y": 2477
        },
        {
          "x": 1198,
          "y": 2822
        },
        {
          "x": 202,
          "y": 2822
        }
      ],
      "category": "paragraph",
      "html": "<p id='120' style='font-size:18px'>Exploring Over 1000 layers. We explore an aggressively<br>deep model of over 1000 layers. We set n = 200 that<br>leads to a 1202-layer network, which is trained as described<br>above. Our method shows no optimization difficulty, and<br>this 103-layer network is able to achieve training error<br><0.1% (Fig. 6, right). Its test error is still fairly good<br>(7.93%, Table 6).</p>",
      "id": 120,
      "page": 8,
      "text": "Exploring Over 1000 layers. We explore an aggressively\ndeep model of over 1000 layers. We set n = 200 that\nleads to a 1202-layer network, which is trained as described\nabove. Our method shows no optimization difficulty, and\nthis 103-layer network is able to achieve training error\n<0.1% (Fig. 6, right). Its test error is still fairly good\n(7.93%, Table 6)."
    },
    {
      "bounding_box": [
        {
          "x": 203,
          "y": 2831
        },
        {
          "x": 1198,
          "y": 2831
        },
        {
          "x": 1198,
          "y": 2975
        },
        {
          "x": 203,
          "y": 2975
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='121' style='font-size:18px'>But there are still open problems on such aggressively<br>deep models. The testing result of this 1202-layer network<br>is worse than that of our 110-layer network, although both</p>",
      "id": 121,
      "page": 8,
      "text": "But there are still open problems on such aggressively\ndeep models. The testing result of this 1202-layer network\nis worse than that of our 110-layer network, although both"
    },
    {
      "bounding_box": [
        {
          "x": 1391,
          "y": 877
        },
        {
          "x": 2166,
          "y": 877
        },
        {
          "x": 2166,
          "y": 1085
        },
        {
          "x": 1391,
          "y": 1085
        }
      ],
      "category": "table",
      "html": "<br><table id='122' style='font-size:16px'><tr><td>training data</td><td>07+12</td><td>07++12</td></tr><tr><td>test data</td><td>VOC 07 test</td><td>VOC 12 test</td></tr><tr><td>VGG-16</td><td>73.2</td><td>70.4</td></tr><tr><td>ResNet-101</td><td>76.4</td><td>73.8</td></tr></table>",
      "id": 122,
      "page": 8,
      "text": "training data 07+12 07++12\n test data VOC 07 test VOC 12 test\n VGG-16 73.2 70.4\n ResNet-101 76.4"
    },
    {
      "bounding_box": [
        {
          "x": 1281,
          "y": 1101
        },
        {
          "x": 2273,
          "y": 1101
        },
        {
          "x": 2273,
          "y": 1233
        },
        {
          "x": 1281,
          "y": 1233
        }
      ],
      "category": "caption",
      "html": "<br><caption id='123' style='font-size:16px'>Table 7. Object detection mAP (%) on the PASCAL VOC<br>2007/2012 test sets using baseline Faster R-CNN. See also Ta-<br>ble 10 and 11 for better results.</caption>",
      "id": 123,
      "page": 8,
      "text": "Table 7. Object detection mAP (%) on the PASCAL VOC\n2007/2012 test sets using baseline Faster R-CNN. See also Ta-\nble 10 and 11 for better results."
    },
    {
      "bounding_box": [
        {
          "x": 1414,
          "y": 1248
        },
        {
          "x": 2146,
          "y": 1248
        },
        {
          "x": 2146,
          "y": 1397
        },
        {
          "x": 1414,
          "y": 1397
        }
      ],
      "category": "table",
      "html": "<br><table id='124' style='font-size:16px'><tr><td>metric</td><td>mAP@.5</td><td>mAP@[.5, .95]</td></tr><tr><td>VGG-16</td><td>41.5</td><td>21.2</td></tr><tr><td>ResNet-101</td><td>48.4</td><td>27.2</td></tr></table>",
      "id": 124,
      "page": 8,
      "text": "metric mAP@.5 mAP@[.5, .95]\n VGG-16 41.5 21.2\n ResNet-101 48.4"
    },
    {
      "bounding_box": [
        {
          "x": 1285,
          "y": 1418
        },
        {
          "x": 2274,
          "y": 1418
        },
        {
          "x": 2274,
          "y": 1504
        },
        {
          "x": 1285,
          "y": 1504
        }
      ],
      "category": "caption",
      "html": "<br><caption id='125' style='font-size:16px'>Table 8. Object detection mAP (%) on the COCO validation set<br>using baseline Faster R-CNN. See also Table 9 for better results.</caption>",
      "id": 125,
      "page": 8,
      "text": "Table 8. Object detection mAP (%) on the COCO validation set\nusing baseline Faster R-CNN. See also Table 9 for better results."
    },
    {
      "bounding_box": [
        {
          "x": 1280,
          "y": 1574
        },
        {
          "x": 2276,
          "y": 1574
        },
        {
          "x": 2276,
          "y": 2068
        },
        {
          "x": 1280,
          "y": 2068
        }
      ],
      "category": "paragraph",
      "html": "<p id='126' style='font-size:20px'>have similar training error. We argue that this is because of<br>overfitting. The 1202-layer network may be unnecessarily<br>large (19.4M) for this small dataset. Strong regularization<br>such as maxout [10] or dropout [14] is applied to obtain the<br>best results ([10, 25, 24, 35]) on this dataset. In this paper,<br>we use no maxout/dropout and just simply impose regular-<br>ization via deep and thin architectures by design, without<br>distracting from the focus on the difficulties of optimiza-<br>tion. But combining with stronger regularization may im-<br>prove results, which we will study in the future.</p>",
      "id": 126,
      "page": 8,
      "text": "have similar training error. We argue that this is because of\noverfitting. The 1202-layer network may be unnecessarily\nlarge (19.4M) for this small dataset. Strong regularization\nsuch as maxout [10] or dropout [14] is applied to obtain the\nbest results ([10, 25, 24, 35]) on this dataset. In this paper,\nwe use no maxout/dropout and just simply impose regular-\nization via deep and thin architectures by design, without\ndistracting from the focus on the difficulties of optimiza-\ntion. But combining with stronger regularization may im-\nprove results, which we will study in the future."
    },
    {
      "bounding_box": [
        {
          "x": 1283,
          "y": 2104
        },
        {
          "x": 2260,
          "y": 2104
        },
        {
          "x": 2260,
          "y": 2149
        },
        {
          "x": 1283,
          "y": 2149
        }
      ],
      "category": "paragraph",
      "html": "<p id='127' style='font-size:22px'>4.3. Object Detection on PASCAL and MS COCO</p>",
      "id": 127,
      "page": 8,
      "text": "4.3. Object Detection on PASCAL and MS COCO"
    },
    {
      "bounding_box": [
        {
          "x": 1279,
          "y": 2181
        },
        {
          "x": 2274,
          "y": 2181
        },
        {
          "x": 2274,
          "y": 2773
        },
        {
          "x": 1279,
          "y": 2773
        }
      ],
      "category": "paragraph",
      "html": "<p id='128' style='font-size:18px'>Our method has good generalization performance on<br>other recognition tasks. Table 7 and 8 show the object de-<br>tection baseline results on PASCAL VOC 2007 and 2012<br>[5] and COCO [26]. We adopt Faster R-CNN [32] as the de-<br>tection method. Here we are interested in the improvements<br>of replacing VGG-16 [41] with ResNet-101. The detection<br>implementation (see appendix) of using both models is the<br>same, SO the gains can only be attributed to better networks.<br>Most remarkably, on the challenging COCO dataset we ob-<br>tain a 6.0% increase in COCO's standard metric (mAP@[.5,<br>.95]), which is a 28% relative improvement. This gain is<br>solely due to the learned representations.</p>",
      "id": 128,
      "page": 8,
      "text": "Our method has good generalization performance on\nother recognition tasks. Table 7 and 8 show the object de-\ntection baseline results on PASCAL VOC 2007 and 2012\n[5] and COCO [26]. We adopt Faster R-CNN [32] as the de-\ntection method. Here we are interested in the improvements\nof replacing VGG-16 [41] with ResNet-101. The detection\nimplementation (see appendix) of using both models is the\nsame, SO the gains can only be attributed to better networks.\nMost remarkably, on the challenging COCO dataset we ob-\ntain a 6.0% increase in COCO's standard metric (mAP@[.5,\n.95]), which is a 28% relative improvement. This gain is\nsolely due to the learned representations."
    },
    {
      "bounding_box": [
        {
          "x": 1281,
          "y": 2780
        },
        {
          "x": 2274,
          "y": 2780
        },
        {
          "x": 2274,
          "y": 2976
        },
        {
          "x": 1281,
          "y": 2976
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='129' style='font-size:18px'>Based on deep residual nets, we won the 1st places in<br>several tracks in ILSVRC & COCO 2015 competitions: Im-<br>ageNet detection, ImageNet localization, COCO detection,<br>and COCO segmentation. The details are in the appendix.</p>",
      "id": 129,
      "page": 8,
      "text": "Based on deep residual nets, we won the 1st places in\nseveral tracks in ILSVRC & COCO 2015 competitions: Im-\nageNet detection, ImageNet localization, COCO detection,\nand COCO segmentation. The details are in the appendix."
    },
    {
      "bounding_box": [
        {
          "x": 1226,
          "y": 3057
        },
        {
          "x": 1252,
          "y": 3057
        },
        {
          "x": 1252,
          "y": 3090
        },
        {
          "x": 1226,
          "y": 3090
        }
      ],
      "category": "footer",
      "html": "<footer id='130' style='font-size:18px'>8</footer>",
      "id": 130,
      "page": 8,
      "text": "8"
    },
    {
      "bounding_box": [
        {
          "x": 204,
          "y": 303
        },
        {
          "x": 444,
          "y": 303
        },
        {
          "x": 444,
          "y": 351
        },
        {
          "x": 204,
          "y": 351
        }
      ],
      "category": "paragraph",
      "html": "<p id='131' style='font-size:20px'>References</p>",
      "id": 131,
      "page": 9,
      "text": "References"
    },
    {
      "bounding_box": [
        {
          "x": 210,
          "y": 369
        },
        {
          "x": 1202,
          "y": 369
        },
        {
          "x": 1202,
          "y": 2969
        },
        {
          "x": 210,
          "y": 2969
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='132' style='font-size:14px'>[1] Y. Bengio, P. Simard, and P. Frasconi. Learning long-term dependen-<br>cies with gradient descent is difficult. IEEE Transactions on Neural<br>Networks, 5(2):157-166, 1994.<br>[2] C. M. Bishop. Neural networks for pattern recognition. Oxford<br>university press, 1995.<br>[3] W. L. Briggs, S. F. McCormick, et al. A Multigrid Tutorial. Siam,<br>2000.<br>[4] K. Chatfield, V. Lempitsky, A. Vedaldi, and A. Zisserman. The devil<br>is in the details: an evaluation of recent feature encoding methods.<br>In BMVC, 2011.<br>[5] M. Everingham, L. Van Gool, C. K. Williams, J. Winn, and A. Zis-<br>serman. The Pascal Visual Object Classes (VOC) Challenge. IJCV,<br>pages 303-338, 2010.<br>[6] S. Gidaris and N. Komodakis. Object detection via a multi-region &<br>semantic segmentation-aware cnn model. In ICCV, 2015.<br>[7] R. Girshick. Fast R-CNN. In ICCV, 2015.<br>[8] R. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich feature hier-<br>archies for accurate object detection and semantic segmentation. In<br>CVPR, 2014.<br>[9] X. Glorot and Y. Bengio. Understanding the difficulty of training<br>deep feedforward neural networks. In AISTATS, 2010.<br>[10] I. J. Goodfellow, D. Warde-Farley, M. Mirza, A. Courville, and<br>Y. Bengio. Maxout networks. arXiv:1302.4389, 2013.<br>[11] K. He and J. Sun. Convolutional neural networks at constrained time<br>cost. In CVPR, 2015.<br>[12] K. He, X. Zhang, S. Ren, and J. Sun. Spatial pyramid pooling in deep<br>convolutional networks for visual recognition. In ECCV, 2014.<br>[13] K. He, X. Zhang, S. Ren, and J. Sun. Delving deep into rectifiers:<br>Surpassing human-level performance on imagenet classification. In<br>ICCV, 2015.<br>[14] G. E. Hinton, N. Srivastava, A. Krizhevsky, I. Sutskever, and<br>R. R. Salakhutdinov. Improving neural networks by preventing CO-<br>adaptation of feature detectors. arXiv:1207.0580, 2012.<br>[15] S. Hochreiter and J. Schmidhuber. Long short-term memory. Neural<br>computation, 9(8):1735-1780, 1997.<br>[16] S. Ioffe and C. Szegedy. Batch normalization: Accelerating deep<br>network training by reducing internal covariate shift. In ICML, 2015.<br>[17] H. Jegou, M. Douze, and C. Schmid. Product quantization for nearest<br>neighbor search. TPAMI, 33, 2011.<br>[18] H. Jegou, F. Perronnin, M. Douze, J. Sanchez, P. Perez, and<br>C. Schmid. Aggregating local image descriptors into compact codes.<br>TPAMI, 2012.<br>[19] Y. Jia, E. Shelhamer, J. Donahue, S. Karayev, J. Long, R. Girshick,<br>S. Guadarrama, and T. Darrell. Caffe: Convolutional architecture for<br>fast feature embedding. arXiv:1408.5093, 2014.<br>[20] A. Krizhevsky. Learning multiple layers of features from tiny im-<br>ages. Tech Report, 2009.<br>[21] A. Krizhevsky, I. Sutskever, and G. Hinton. Imagenet classification<br>with deep convolutional neural networks. In NIPS, 2012.<br>[22] Y. LeCun, B. Boser, J. S. Denker, D. Henderson, R. E. Howard,<br>W. Hubbard, and L. D. Jackel. Backpropagation applied to hand-<br>written zip code recognition. Neural computation, 1989.<br>[23] Y. LeCun, L. Bottou, G. B. Orr, and K.-R. M�ller. Efficient backprop.<br>In Neural Networks: Tricks ofthe Trade, pages 9-50. Springer, 1998.<br>[24] C.-Y. Lee, S. Xie, P. Gallagher, Z. Zhang, and Z. Tu. Deeply-<br>supervised nets. arXiv:1409.5185, 2014.<br>[25] M. Lin, Q. Chen, and S. Yan. Network in network. arXiv:1312.4400,<br>2013.<br>[26] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ramanan,<br>P. Dollar, and C. L. Zitnick. Microsoft COCO: Common objects in<br>context. In ECCV. 2014.<br>[27] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional networks<br>for semantic segmentation. In CVPR, 2015.</p>",
      "id": 132,
      "page": 9,
      "text": "[1] Y. Bengio, P. Simard, and P. Frasconi. Learning long-term dependen-\ncies with gradient descent is difficult. IEEE Transactions on Neural\nNetworks, 5(2):157-166, 1994.\n[2] C. M. Bishop. Neural networks for pattern recognition. Oxford\nuniversity press, 1995.\n[3] W. L. Briggs, S. F. McCormick, et al. A Multigrid Tutorial. Siam,\n2000.\n[4] K. Chatfield, V. Lempitsky, A. Vedaldi, and A. Zisserman. The devil\nis in the details: an evaluation of recent feature encoding methods.\nIn BMVC, 2011.\n[5] M. Everingham, L. Van Gool, C. K. Williams, J. Winn, and A. Zis-\nserman. The Pascal Visual Object Classes (VOC) Challenge. IJCV,\npages 303-338, 2010.\n[6] S. Gidaris and N. Komodakis. Object detection via a multi-region &\nsemantic segmentation-aware cnn model. In ICCV, 2015.\n[7] R. Girshick. Fast R-CNN. In ICCV, 2015.\n[8] R. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich feature hier-\narchies for accurate object detection and semantic segmentation. In\nCVPR, 2014.\n[9] X. Glorot and Y. Bengio. Understanding the difficulty of training\ndeep feedforward neural networks. In AISTATS, 2010.\n[10] I. J. Goodfellow, D. Warde-Farley, M. Mirza, A. Courville, and\nY. Bengio. Maxout networks. arXiv:1302.4389, 2013.\n[11] K. He and J. Sun. Convolutional neural networks at constrained time\ncost. In CVPR, 2015.\n[12] K. He, X. Zhang, S. Ren, and J. Sun. Spatial pyramid pooling in deep\nconvolutional networks for visual recognition. In ECCV, 2014.\n[13] K. He, X. Zhang, S. Ren, and J. Sun. Delving deep into rectifiers:\nSurpassing human-level performance on imagenet classification. In\nICCV, 2015.\n[14] G. E. Hinton, N. Srivastava, A. Krizhevsky, I. Sutskever, and\nR. R. Salakhutdinov. Improving neural networks by preventing CO-\nadaptation of feature detectors. arXiv:1207.0580, 2012.\n[15] S. Hochreiter and J. Schmidhuber. Long short-term memory. Neural\ncomputation, 9(8):1735-1780, 1997.\n[16] S. Ioffe and C. Szegedy. Batch normalization: Accelerating deep\nnetwork training by reducing internal covariate shift. In ICML, 2015.\n[17] H. Jegou, M. Douze, and C. Schmid. Product quantization for nearest\nneighbor search. TPAMI, 33, 2011.\n[18] H. Jegou, F. Perronnin, M. Douze, J. Sanchez, P. Perez, and\nC. Schmid. Aggregating local image descriptors into compact codes.\nTPAMI, 2012.\n[19] Y. Jia, E. Shelhamer, J. Donahue, S. Karayev, J. Long, R. Girshick,\nS. Guadarrama, and T. Darrell. Caffe: Convolutional architecture for\nfast feature embedding. arXiv:1408.5093, 2014.\n[20] A. Krizhevsky. Learning multiple layers of features from tiny im-\nages. Tech Report, 2009.\n[21] A. Krizhevsky, I. Sutskever, and G. Hinton. Imagenet classification\nwith deep convolutional neural networks. In NIPS, 2012.\n[22] Y. LeCun, B. Boser, J. S. Denker, D. Henderson, R. E. Howard,\nW. Hubbard, and L. D. Jackel. Backpropagation applied to hand-\nwritten zip code recognition. Neural computation, 1989.\n[23] Y. LeCun, L. Bottou, G. B. Orr, and K.-R. M�ller. Efficient backprop.\nIn Neural Networks: Tricks ofthe Trade, pages 9-50. Springer, 1998.\n[24] C.-Y. Lee, S. Xie, P. Gallagher, Z. Zhang, and Z. Tu. Deeply-\nsupervised nets. arXiv:1409.5185, 2014.\n[25] M. Lin, Q. Chen, and S. Yan. Network in network. arXiv:1312.4400,\n2013.\n[26] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ramanan,\nP. Dollar, and C. L. Zitnick. Microsoft COCO: Common objects in\ncontext. In ECCV. 2014.\n[27] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional networks\nfor semantic segmentation. In CVPR, 2015."
    },
    {
      "bounding_box": [
        {
          "x": 1277,
          "y": 306
        },
        {
          "x": 2287,
          "y": 306
        },
        {
          "x": 2287,
          "y": 2540
        },
        {
          "x": 1277,
          "y": 2540
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='133' style='font-size:14px'>[28] G. Montufar, R. Pascanu, K. Cho, and Y. Bengio. On the number of<br>linear regions of deep neural networks. In NIPS, 2014.<br>[29] V. Nair and G. E. Hinton. Rectified linear units improve restricted<br>boltzmann machines. In ICML, 2010.<br>[30] F. Perronnin and C. Dance. Fisher kernels on visual vocabularies for<br>image categorization. In CVPR, 2007.<br>[31] T. Raiko, H. Valpola, and Y. LeCun. Deep learning made easier by<br>linear transformations in perceptrons. In AISTATS, 2012.<br>[32] S. Ren, K. He, R. Girshick, and J. Sun. Faster R-CNN: Towards<br>real-time object detection with region proposal networks. In NIPS,<br>2015.<br>[33] S. Ren, K. He, R. Girshick, X. Zhang, and J. Sun. Object detection<br>networks on convolutional feature maps. arXiv:1504.06066, 2015.<br>[34] B. D. Ripley. Pattern recognition and neural networks. Cambridge<br>university press, 1996.<br>[35] A. Romero, N. Ballas, S. E. Kahou, A. Chassang, C. Gatta, and<br>Y. Bengio. Fitnets: Hints for thin deep nets. In ICLR, 2015.<br>[36] 0. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh, S. Ma,<br>Z. Huang, A. Karpathy, A. Khosla, M. Bernstein, et al. Imagenet<br>large scale visual recognition challenge. arXiv:1409.0575, 2014.<br>[37] A. M. Saxe, J. L. McClelland, and S. Ganguli. Exact solutions to<br>the nonlinear dynamics of learning in deep linear neural networks.<br>arXiv:1312.6120, 2013.<br>[38] N. N. Schraudolph. Accelerated gradient descent by factor-centering<br>decomposition. Technical report, 1998.<br>[39] N. N. Schraudolph. Centering neural network gradient factors. In<br>Neural Networks: Tricks of the Trade, pages 207-226. Springer,<br>1998.<br>[40] P. Sermanet, D. Eigen, X. Zhang, M. Mathieu, R. Fergus, and Y. Le-<br>Cun. Overfeat: Integrated recognition, localization and detection<br>using convolutional networks. In ICLR, 2014.<br>[41] K. Simonyan and A. Zisserman. Very deep convolutional networks<br>for large-scale image recognition. In ICLR, 2015.<br>[42] R. K. Srivastava, K. Greff, and J. Schmidhuber. Highway networks.<br>arXiv:1505.00387, 2015.<br>[43] R. K. Srivastava, K. Greff, and J. Schmidhuber. Training very deep<br>networks. 1507.06228, 2015.<br>[44] C. Szegedy, W. Liu, Y. Jia, P. Sermanet, S. Reed, D. Anguelov, D. Er-<br>han, V. Vanhoucke, and A. Rabinovich. Going deeper with convolu-<br>tions. In CVPR, 2015.<br>[45] R. Szeliski. Fast surface interpolation using hierarchical basis func-<br>tions. TPAMI, 1990.<br>[46] R. Szeliski. Locally adapted hierarchical basis preconditioning. In<br>SIGGRAPH, 2006.<br>[47] T. Vatanen, T. Raiko, H. Valpola, and Y. LeCun. Pushing stochas-<br>tic gradient towards second-order methods-backpropagation learn-<br>ing with transformations in nonlinearities. In Neural Information<br>Processing, 2013.<br>[48] A. Vedaldi and B. Fulkerson. VLFeat: An open and portable library<br>of computer vision algorithms, 2008.<br>[49] W. Venables and B. Ripley. Modern applied statistics with s-plus.<br>1999.<br>[50] M. D. Zeiler and R. Fergus. Visualizing and understanding convolu-<br>tional neural networks. In ECCV, 2014.</p>",
      "id": 133,
      "page": 9,
      "text": "[28] G. Montufar, R. Pascanu, K. Cho, and Y. Bengio. On the number of\nlinear regions of deep neural networks. In NIPS, 2014.\n[29] V. Nair and G. E. Hinton. Rectified linear units improve restricted\nboltzmann machines. In ICML, 2010.\n[30] F. Perronnin and C. Dance. Fisher kernels on visual vocabularies for\nimage categorization. In CVPR, 2007.\n[31] T. Raiko, H. Valpola, and Y. LeCun. Deep learning made easier by\nlinear transformations in perceptrons. In AISTATS, 2012.\n[32] S. Ren, K. He, R. Girshick, and J. Sun. Faster R-CNN: Towards\nreal-time object detection with region proposal networks. In NIPS,\n2015.\n[33] S. Ren, K. He, R. Girshick, X. Zhang, and J. Sun. Object detection\nnetworks on convolutional feature maps. arXiv:1504.06066, 2015.\n[34] B. D. Ripley. Pattern recognition and neural networks. Cambridge\nuniversity press, 1996.\n[35] A. Romero, N. Ballas, S. E. Kahou, A. Chassang, C. Gatta, and\nY. Bengio. Fitnets: Hints for thin deep nets. In ICLR, 2015.\n[36] 0. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh, S. Ma,\nZ. Huang, A. Karpathy, A. Khosla, M. Bernstein, et al. Imagenet\nlarge scale visual recognition challenge. arXiv:1409.0575, 2014.\n[37] A. M. Saxe, J. L. McClelland, and S. Ganguli. Exact solutions to\nthe nonlinear dynamics of learning in deep linear neural networks.\narXiv:1312.6120, 2013.\n[38] N. N. Schraudolph. Accelerated gradient descent by factor-centering\ndecomposition. Technical report, 1998.\n[39] N. N. Schraudolph. Centering neural network gradient factors. In\nNeural Networks: Tricks of the Trade, pages 207-226. Springer,\n1998.\n[40] P. Sermanet, D. Eigen, X. Zhang, M. Mathieu, R. Fergus, and Y. Le-\nCun. Overfeat: Integrated recognition, localization and detection\nusing convolutional networks. In ICLR, 2014.\n[41] K. Simonyan and A. Zisserman. Very deep convolutional networks\nfor large-scale image recognition. In ICLR, 2015.\n[42] R. K. Srivastava, K. Greff, and J. Schmidhuber. Highway networks.\narXiv:1505.00387, 2015.\n[43] R. K. Srivastava, K. Greff, and J. Schmidhuber. Training very deep\nnetworks. 1507.06228, 2015.\n[44] C. Szegedy, W. Liu, Y. Jia, P. Sermanet, S. Reed, D. Anguelov, D. Er-\nhan, V. Vanhoucke, and A. Rabinovich. Going deeper with convolu-\ntions. In CVPR, 2015.\n[45] R. Szeliski. Fast surface interpolation using hierarchical basis func-\ntions. TPAMI, 1990.\n[46] R. Szeliski. Locally adapted hierarchical basis preconditioning. In\nSIGGRAPH, 2006.\n[47] T. Vatanen, T. Raiko, H. Valpola, and Y. LeCun. Pushing stochas-\ntic gradient towards second-order methods-backpropagation learn-\ning with transformations in nonlinearities. In Neural Information\nProcessing, 2013.\n[48] A. Vedaldi and B. Fulkerson. VLFeat: An open and portable library\nof computer vision algorithms, 2008.\n[49] W. Venables and B. Ripley. Modern applied statistics with s-plus.\n1999.\n[50] M. D. Zeiler and R. Fergus. Visualizing and understanding convolu-\ntional neural networks. In ECCV, 2014."
    },
    {
      "bounding_box": [
        {
          "x": 1226,
          "y": 3056
        },
        {
          "x": 1252,
          "y": 3056
        },
        {
          "x": 1252,
          "y": 3088
        },
        {
          "x": 1226,
          "y": 3088
        }
      ],
      "category": "footer",
      "html": "<footer id='134' style='font-size:16px'>9</footer>",
      "id": 134,
      "page": 9,
      "text": "9"
    },
    {
      "bounding_box": [
        {
          "x": 203,
          "y": 302
        },
        {
          "x": 841,
          "y": 302
        },
        {
          "x": 841,
          "y": 353
        },
        {
          "x": 203,
          "y": 353
        }
      ],
      "category": "paragraph",
      "html": "<p id='135' style='font-size:20px'>A. Object Detection Baselines</p>",
      "id": 135,
      "page": 10,
      "text": "A. Object Detection Baselines"
    },
    {
      "bounding_box": [
        {
          "x": 202,
          "y": 387
        },
        {
          "x": 1199,
          "y": 387
        },
        {
          "x": 1199,
          "y": 680
        },
        {
          "x": 202,
          "y": 680
        }
      ],
      "category": "paragraph",
      "html": "<p id='136' style='font-size:16px'>In this section we introduce our detection method based<br>on the baseline Faster R-CNN [32] system. The models are<br>initialized by the ImageNet classification models, and then<br>fine-tuned on the object detection data. We have experi-<br>mented with ResNet-50/101 at the time of the ILSVRC &<br>COCO 2015 detection competitions.</p>",
      "id": 136,
      "page": 10,
      "text": "In this section we introduce our detection method based\non the baseline Faster R-CNN [32] system. The models are\ninitialized by the ImageNet classification models, and then\nfine-tuned on the object detection data. We have experi-\nmented with ResNet-50/101 at the time of the ILSVRC &\nCOCO 2015 detection competitions."
    },
    {
      "bounding_box": [
        {
          "x": 200,
          "y": 687
        },
        {
          "x": 1200,
          "y": 687
        },
        {
          "x": 1200,
          "y": 1531
        },
        {
          "x": 200,
          "y": 1531
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='137' style='font-size:18px'>Unlike VGG-16 used in [32], our ResNet has no hidden<br>fc layers. We adopt the idea of \"Networks on Conv fea-<br>ture maps\" (NoC) [33] to address this issue. We compute<br>the full-image shared conv feature maps using those lay-<br>ers whose strides on the image are no greater than 16 pixels<br>(i.e., conv1, conv2_ x, conv3_x, and conv4_x, totally 91 conv<br>layers in ResNet-101; Table 1). We consider these layers as<br>analogous to the 13 conv layers in VGG-16, and by doing<br>so, both ResNet and VGG-16 have conv feature maps of the<br>same total stride (16 pixels). These layers are shared by a<br>region proposal network (RPN, generating 300 proposals)<br>[32] and a Fast R-CNN detection network [7]. RoI pool-<br>ing [7] is performed before conv5_1. On this RoI-pooled<br>feature, all layers of conv5 _x and up are adopted for each<br>region, playing the roles of VGG-16's fc layers. The final<br>classification layer is replaced by two sibling layers (classi-<br>fication and box regression [7]).</p>",
      "id": 137,
      "page": 10,
      "text": "Unlike VGG-16 used in [32], our ResNet has no hidden\nfc layers. We adopt the idea of \"Networks on Conv fea-\nture maps\" (NoC) [33] to address this issue. We compute\nthe full-image shared conv feature maps using those lay-\ners whose strides on the image are no greater than 16 pixels\n(i.e., conv1, conv2_ x, conv3_x, and conv4_x, totally 91 conv\nlayers in ResNet-101; Table 1). We consider these layers as\nanalogous to the 13 conv layers in VGG-16, and by doing\nso, both ResNet and VGG-16 have conv feature maps of the\nsame total stride (16 pixels). These layers are shared by a\nregion proposal network (RPN, generating 300 proposals)\n[32] and a Fast R-CNN detection network [7]. RoI pool-\ning [7] is performed before conv5_1. On this RoI-pooled\nfeature, all layers of conv5 _x and up are adopted for each\nregion, playing the roles of VGG-16's fc layers. The final\nclassification layer is replaced by two sibling layers (classi-\nfication and box regression [7])."
    },
    {
      "bounding_box": [
        {
          "x": 201,
          "y": 1537
        },
        {
          "x": 1200,
          "y": 1537
        },
        {
          "x": 1200,
          "y": 1931
        },
        {
          "x": 201,
          "y": 1931
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='138' style='font-size:18px'>For the usage of BN layers, after pre-training, we com-<br>pute the BN statistics (means and variances) for each layer<br>on the ImageNet training set. Then the BN layers are fixed<br>during fine-tuning for object detection. As such, the BN<br>layers become linear activations with constant offsets and<br>scales, and BN statistics are not updated by fine-tuning. We<br>fix the BN layers mainly for reducing memory consumption<br>in Faster R-CNN training.</p>",
      "id": 138,
      "page": 10,
      "text": "For the usage of BN layers, after pre-training, we com-\npute the BN statistics (means and variances) for each layer\non the ImageNet training set. Then the BN layers are fixed\nduring fine-tuning for object detection. As such, the BN\nlayers become linear activations with constant offsets and\nscales, and BN statistics are not updated by fine-tuning. We\nfix the BN layers mainly for reducing memory consumption\nin Faster R-CNN training."
    },
    {
      "bounding_box": [
        {
          "x": 203,
          "y": 1956
        },
        {
          "x": 474,
          "y": 1956
        },
        {
          "x": 474,
          "y": 1999
        },
        {
          "x": 203,
          "y": 1999
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='139' style='font-size:16px'>PASCAL VOC</p>",
      "id": 139,
      "page": 10,
      "text": "PASCAL VOC"
    },
    {
      "bounding_box": [
        {
          "x": 202,
          "y": 2007
        },
        {
          "x": 1199,
          "y": 2007
        },
        {
          "x": 1199,
          "y": 2503
        },
        {
          "x": 202,
          "y": 2503
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='140' style='font-size:16px'>Following [7, 32], for the PASCAL VOC 2007 test set,<br>we use the 5k trainval images in VOC 2007 and 16k train-<br>val images in VOC 2012 for training (\"07+12\"). For the<br>PASCAL VOC 2012 test set, we use the 10k trainval+test<br>images in VOC 2007 and 16k trainval images in VOC 2012<br>for training (\"07++12\"). The hyper-parameters for train-<br>ing Faster R-CNN are the same as in [32]. Table 7 shows<br>the results. ResNet-101 improves the mAP by >3% over<br>VGG-16. This gain is solely because of the improved fea-<br>tures learned by ResNet.</p>",
      "id": 140,
      "page": 10,
      "text": "Following [7, 32], for the PASCAL VOC 2007 test set,\nwe use the 5k trainval images in VOC 2007 and 16k train-\nval images in VOC 2012 for training (\"07+12\"). For the\nPASCAL VOC 2012 test set, we use the 10k trainval+test\nimages in VOC 2007 and 16k trainval images in VOC 2012\nfor training (\"07++12\"). The hyper-parameters for train-\ning Faster R-CNN are the same as in [32]. Table 7 shows\nthe results. ResNet-101 improves the mAP by >3% over\nVGG-16. This gain is solely because of the improved fea-\ntures learned by ResNet."
    },
    {
      "bounding_box": [
        {
          "x": 204,
          "y": 2527
        },
        {
          "x": 408,
          "y": 2527
        },
        {
          "x": 408,
          "y": 2571
        },
        {
          "x": 204,
          "y": 2571
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='141' style='font-size:18px'>MS COCO</p>",
      "id": 141,
      "page": 10,
      "text": "MS COCO"
    },
    {
      "bounding_box": [
        {
          "x": 202,
          "y": 2580
        },
        {
          "x": 1199,
          "y": 2580
        },
        {
          "x": 1199,
          "y": 2976
        },
        {
          "x": 202,
          "y": 2976
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='142' style='font-size:16px'>The MS COCO dataset [26] involves 80 object cate-<br>gories. We evaluate the PASCAL VOC metric (mAP @<br>IoU = 0.5) and the standard COCO metric (mAP @ IoU =<br>.5:. 05:.95). We use the 80k images on the train set for train-<br>ing and the 40k images on the val set for evaluation. Our<br>detection system for COCO is similar to that for PASCAL<br>VOC. We train the COCO models with an 8-GPU imple-<br>mentation, and thus the RPN step has a mini-batch size of</p>",
      "id": 142,
      "page": 10,
      "text": "The MS COCO dataset [26] involves 80 object cate-\ngories. We evaluate the PASCAL VOC metric (mAP @\nIoU = 0.5) and the standard COCO metric (mAP @ IoU =\n.5:. 05:.95). We use the 80k images on the train set for train-\ning and the 40k images on the val set for evaluation. Our\ndetection system for COCO is similar to that for PASCAL\nVOC. We train the COCO models with an 8-GPU imple-\nmentation, and thus the RPN step has a mini-batch size of"
    },
    {
      "bounding_box": [
        {
          "x": 1279,
          "y": 307
        },
        {
          "x": 2276,
          "y": 307
        },
        {
          "x": 2276,
          "y": 503
        },
        {
          "x": 1279,
          "y": 503
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='143' style='font-size:14px'>8 images (i.e., 1 per GPU) and the Fast R-CNN step has a<br>mini-batch size of 16 images. The RPN step and Fast R-<br>CNN step are both trained for 240k iterations with a learn-<br>ing rate of 0.001 and then for 80k iterations with 0.0001.</p>",
      "id": 143,
      "page": 10,
      "text": "8 images (i.e., 1 per GPU) and the Fast R-CNN step has a\nmini-batch size of 16 images. The RPN step and Fast R-\nCNN step are both trained for 240k iterations with a learn-\ning rate of 0.001 and then for 80k iterations with 0.0001."
    },
    {
      "bounding_box": [
        {
          "x": 1280,
          "y": 513
        },
        {
          "x": 2277,
          "y": 513
        },
        {
          "x": 2277,
          "y": 905
        },
        {
          "x": 1280,
          "y": 905
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='144' style='font-size:16px'>Table 8 shows the results on the MS COCO validation<br>set. ResNet-101 has a 6% increase of mAP@[.5, .95] over<br>VGG-16, which is a 28% relative improvement, solely con-<br>tributed by the features learned by the better network. Re-<br>markably, the mAP@[.5, .95]'s absolute increase (6.0%) is<br>nearly as big as mAP@.5's (6.9%). This suggests that a<br>deeper network can improve both recognition and localiza-<br>tion.</p>",
      "id": 144,
      "page": 10,
      "text": "Table 8 shows the results on the MS COCO validation\nset. ResNet-101 has a 6% increase of mAP@[.5, .95] over\nVGG-16, which is a 28% relative improvement, solely con-\ntributed by the features learned by the better network. Re-\nmarkably, the mAP@[.5, .95]'s absolute increase (6.0%) is\nnearly as big as mAP@.5's (6.9%). This suggests that a\ndeeper network can improve both recognition and localiza-\ntion."
    },
    {
      "bounding_box": [
        {
          "x": 1281,
          "y": 966
        },
        {
          "x": 2027,
          "y": 966
        },
        {
          "x": 2027,
          "y": 1017
        },
        {
          "x": 1281,
          "y": 1017
        }
      ],
      "category": "paragraph",
      "html": "<p id='145' style='font-size:22px'>B. Object Detection Improvements</p>",
      "id": 145,
      "page": 10,
      "text": "B. Object Detection Improvements"
    },
    {
      "bounding_box": [
        {
          "x": 1281,
          "y": 1054
        },
        {
          "x": 2276,
          "y": 1054
        },
        {
          "x": 2276,
          "y": 1201
        },
        {
          "x": 1281,
          "y": 1201
        }
      ],
      "category": "paragraph",
      "html": "<p id='146' style='font-size:18px'>For completeness, we report the improvements made for<br>the competitions. These improvements are based on deep<br>features and thus should benefit from residual learning.</p>",
      "id": 146,
      "page": 10,
      "text": "For completeness, we report the improvements made for\nthe competitions. These improvements are based on deep\nfeatures and thus should benefit from residual learning."
    },
    {
      "bounding_box": [
        {
          "x": 1281,
          "y": 1229
        },
        {
          "x": 1488,
          "y": 1229
        },
        {
          "x": 1488,
          "y": 1270
        },
        {
          "x": 1281,
          "y": 1270
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='147' style='font-size:18px'>MS COCO</p>",
      "id": 147,
      "page": 10,
      "text": "MS COCO"
    },
    {
      "bounding_box": [
        {
          "x": 1279,
          "y": 1283
        },
        {
          "x": 2276,
          "y": 1283
        },
        {
          "x": 2276,
          "y": 1780
        },
        {
          "x": 1279,
          "y": 1780
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='148' style='font-size:16px'>Box refinement. Our box refinement partially follows the it-<br>erative localization in [6]. In Faster R-CNN, the final output<br>is a regressed box that is different from its proposal box. So<br>for inference, we pool a new feature from the regressed box<br>and obtain a new classification score and a new regressed<br>box. We combine these 300 new predictions with the orig-<br>inal 300 predictions. Non-maximum suppression (NMS) is<br>applied on the union set of predicted boxes using an IoU<br>threshold of 0.3 [8], followed by box voting [6]. Box re-<br>finement improves mAP by about 2 points (Table 9).</p>",
      "id": 148,
      "page": 10,
      "text": "Box refinement. Our box refinement partially follows the it-\nerative localization in [6]. In Faster R-CNN, the final output\nis a regressed box that is different from its proposal box. So\nfor inference, we pool a new feature from the regressed box\nand obtain a new classification score and a new regressed\nbox. We combine these 300 new predictions with the orig-\ninal 300 predictions. Non-maximum suppression (NMS) is\napplied on the union set of predicted boxes using an IoU\nthreshold of 0.3 [8], followed by box voting [6]. Box re-\nfinement improves mAP by about 2 points (Table 9)."
    },
    {
      "bounding_box": [
        {
          "x": 1277,
          "y": 1805
        },
        {
          "x": 2277,
          "y": 1805
        },
        {
          "x": 2277,
          "y": 2354
        },
        {
          "x": 1277,
          "y": 2354
        }
      ],
      "category": "paragraph",
      "html": "<p id='149' style='font-size:18px'>Global context. We combine global context in the Fast<br>R-CNN step. Given the full-image conv feature map, we<br>pool a feature by global Spatial Pyramid Pooling [12] (with<br>a \"single-level\" pyramid) which can be implemented as<br>\"RoI\" pooling using the entire image's bounding box as the<br>RoI. This pooled feature is fed into the post-RoI layers to<br>obtain a global context feature. This global feature is con-<br>catenated with the original per-region feature, followed by<br>the sibling classification and box regression layers. This<br>new structure is trained end-to-end. Global context im-<br>proves mAP@.5 by about 1 point (Table 9).</p>",
      "id": 149,
      "page": 10,
      "text": "Global context. We combine global context in the Fast\nR-CNN step. Given the full-image conv feature map, we\npool a feature by global Spatial Pyramid Pooling [12] (with\na \"single-level\" pyramid) which can be implemented as\n\"RoI\" pooling using the entire image's bounding box as the\nRoI. This pooled feature is fed into the post-RoI layers to\nobtain a global context feature. This global feature is con-\ncatenated with the original per-region feature, followed by\nthe sibling classification and box regression layers. This\nnew structure is trained end-to-end. Global context im-\nproves mAP@.5 by about 1 point (Table 9)."
    },
    {
      "bounding_box": [
        {
          "x": 1277,
          "y": 2379
        },
        {
          "x": 2276,
          "y": 2379
        },
        {
          "x": 2276,
          "y": 2978
        },
        {
          "x": 1277,
          "y": 2978
        }
      ],
      "category": "paragraph",
      "html": "<p id='150' style='font-size:18px'>Multi-scale testing. In the above, all results are obtained by<br>single-scale training/testing as in [32], where the image's<br>shorter side is s = 600 pixels. Multi-scale training/testing<br>has been developed in [12, 7] by selecting a scale from a<br>feature pyramid, and in [33] by using maxout layers. In<br>our current implementation, we have performed multi-scale<br>testing following [33]; we have not performed multi-scale<br>training because of limited time. In addition, we have per-<br>formed multi-scale testing only for the Fast R-CNN step<br>(but not yet for the RPN step). With a trained model, we<br>compute conv feature maps on an image pyramid, where the<br>image's shorter sides are s E {200, 400, 600, 800, 1000}.</p>",
      "id": 150,
      "page": 10,
      "text": "Multi-scale testing. In the above, all results are obtained by\nsingle-scale training/testing as in [32], where the image's\nshorter side is s = 600 pixels. Multi-scale training/testing\nhas been developed in [12, 7] by selecting a scale from a\nfeature pyramid, and in [33] by using maxout layers. In\nour current implementation, we have performed multi-scale\ntesting following [33]; we have not performed multi-scale\ntraining because of limited time. In addition, we have per-\nformed multi-scale testing only for the Fast R-CNN step\n(but not yet for the RPN step). With a trained model, we\ncompute conv feature maps on an image pyramid, where the\nimage's shorter sides are s E {200, 400, 600, 800, 1000}."
    },
    {
      "bounding_box": [
        {
          "x": 1219,
          "y": 3055
        },
        {
          "x": 1262,
          "y": 3055
        },
        {
          "x": 1262,
          "y": 3091
        },
        {
          "x": 1219,
          "y": 3091
        }
      ],
      "category": "footer",
      "html": "<footer id='151' style='font-size:16px'>10</footer>",
      "id": 151,
      "page": 10,
      "text": "10"
    },
    {
      "bounding_box": [
        {
          "x": 577,
          "y": 292
        },
        {
          "x": 1902,
          "y": 292
        },
        {
          "x": 1902,
          "y": 746
        },
        {
          "x": 577,
          "y": 746
        }
      ],
      "category": "table",
      "html": "<table id='152' style='font-size:16px'><tr><td>training data</td><td colspan=\"2\">COCO train</td><td colspan=\"2\">COCO trainval</td></tr><tr><td>test data</td><td colspan=\"2\">COCO val</td><td colspan=\"2\">COCO test-dev</td></tr><tr><td>mAP</td><td>@.5</td><td>@[.5, .95]</td><td>@.5</td><td>@[.5, .95]</td></tr><tr><td>baseline Faster R-CNN (VGG-16)</td><td>41.5</td><td>21.2</td><td></td><td></td></tr><tr><td>baseline Faster R-CNN (ResNet-101)</td><td>48.4</td><td>27.2</td><td></td><td></td></tr><tr><td>+box refinement</td><td>49.9</td><td>29.9</td><td></td><td></td></tr><tr><td>+context</td><td>51.1</td><td>30.0</td><td>53.3</td><td>32.2</td></tr><tr><td>+multi-scale testing</td><td>53.8</td><td>32.5</td><td>55.7</td><td>34.9</td></tr><tr><td>ensemble</td><td></td><td></td><td>59.0</td><td>37.4</td></tr></table>",
      "id": 152,
      "page": 11,
      "text": "training data COCO train COCO trainval\n test data COCO val COCO test-dev\n mAP @.5 @[.5, .95] @.5 @[.5, .95]\n baseline Faster R-CNN (VGG-16) 41.5 21.2  \n baseline Faster R-CNN (ResNet-101) 48.4 27.2  \n +box refinement 49.9 29.9  \n +context 51.1 30.0 53.3 32.2\n +multi-scale testing 53.8 32.5 55.7 34.9\n ensemble   59.0"
    },
    {
      "bounding_box": [
        {
          "x": 540,
          "y": 761
        },
        {
          "x": 1933,
          "y": 761
        },
        {
          "x": 1933,
          "y": 801
        },
        {
          "x": 540,
          "y": 801
        }
      ],
      "category": "caption",
      "html": "<br><caption id='153' style='font-size:18px'>Table 9. Object detection improvements on MS COCO using Faster R-CNN and ResNet-101.</caption>",
      "id": 153,
      "page": 11,
      "text": "Table 9. Object detection improvements on MS COCO using Faster R-CNN and ResNet-101."
    },
    {
      "bounding_box": [
        {
          "x": 209,
          "y": 862
        },
        {
          "x": 2268,
          "y": 862
        },
        {
          "x": 2268,
          "y": 1044
        },
        {
          "x": 209,
          "y": 1044
        }
      ],
      "category": "table",
      "html": "<table id='154' style='font-size:14px'><tr><td>system</td><td>net</td><td>data</td><td>mAP</td><td>areo</td><td>bike</td><td>bird</td><td>boat</td><td>bottle</td><td>bus</td><td>car</td><td>cat</td><td>chair</td><td>COW</td><td>table</td><td>dog</td><td></td><td>horse mbike</td><td></td><td>person plant</td><td>sheep</td><td></td><td>sofa</td><td>train</td><td>tv</td></tr><tr><td>baseline</td><td>VGG-16</td><td>07+12</td><td>73.2</td><td>76.5</td><td>79.0</td><td>70.9</td><td>65.5</td><td>52.1</td><td>83.1</td><td>84.7</td><td></td><td>86.4</td><td>52.0</td><td>81.9</td><td>65.7</td><td>84.8</td><td>84.6</td><td>77.5</td><td>76.7</td><td>38.8</td><td>73.6</td><td>73.9</td><td>83.0</td><td>72.6</td></tr><tr><td>baseline</td><td>ResNet-101</td><td>07+12</td><td>76.4</td><td>79.8</td><td>80.7</td><td>76.2</td><td>68.3</td><td>55.9</td><td>85.1</td><td>85.3</td><td></td><td>89.8</td><td>56.7</td><td>87.8</td><td>69.4</td><td>88.3</td><td>88.9</td><td>80.9</td><td>78.4</td><td>41.7</td><td>78.6</td><td>79.8</td><td>85.3</td><td>72.0</td></tr><tr><td>baseline+++</td><td>ResNet-101</td><td>COCO+07+12</td><td>85.6</td><td>90.0</td><td>89.6</td><td>87.8</td><td>80.8</td><td>76.1</td><td>89.9</td><td>89.9</td><td>89.6</td><td></td><td>75.5</td><td>90.0</td><td>80.7</td><td>89.6</td><td>90.3</td><td>89.1</td><td>88.7</td><td>65.4</td><td>88.1</td><td>85.6</td><td>89.0</td><td>86.8</td></tr></table>",
      "id": 154,
      "page": 11,
      "text": "system net data mAP areo bike bird boat bottle bus car cat chair COW table dog  horse mbike  person plant sheep  sofa train tv\n baseline VGG-16 07+12 73.2 76.5 79.0 70.9 65.5 52.1 83.1 84.7  86.4 52.0 81.9 65.7 84.8 84.6 77.5 76.7 38.8 73.6 73.9 83.0 72.6\n baseline ResNet-101 07+12 76.4 79.8 80.7 76.2 68.3 55.9 85.1 85.3  89.8 56.7 87.8 69.4 88.3 88.9 80.9 78.4 41.7 78.6 79.8 85.3 72.0\n baseline+++ ResNet-101 COCO+07+12 85.6 90.0 89.6 87.8 80.8 76.1 89.9 89.9 89.6  75.5 90.0 80.7 89.6 90.3 89.1 88.7 65.4 88.1 85.6 89.0"
    },
    {
      "bounding_box": [
        {
          "x": 205,
          "y": 1061
        },
        {
          "x": 2266,
          "y": 1061
        },
        {
          "x": 2266,
          "y": 1149
        },
        {
          "x": 205,
          "y": 1149
        }
      ],
      "category": "caption",
      "html": "<br><caption id='155' style='font-size:16px'>Table 10. Detection results on the PASCAL VOC 2007 test set. The baseline is the Faster R-CNN system. The system \"baseline+++\"<br>include box refinement, context, and multi-scale testing in Table 9.</caption>",
      "id": 155,
      "page": 11,
      "text": "Table 10. Detection results on the PASCAL VOC 2007 test set. The baseline is the Faster R-CNN system. The system \"baseline+++\"\ninclude box refinement, context, and multi-scale testing in Table 9."
    },
    {
      "bounding_box": [
        {
          "x": 209,
          "y": 1218
        },
        {
          "x": 2267,
          "y": 1218
        },
        {
          "x": 2267,
          "y": 1402
        },
        {
          "x": 209,
          "y": 1402
        }
      ],
      "category": "table",
      "html": "<table id='156' style='font-size:14px'><tr><td>system</td><td>net</td><td>data</td><td>mAP</td><td>areo</td><td>bike</td><td>bird</td><td>boat</td><td>bottle</td><td>bus</td><td>car</td><td>cat</td><td>chair</td><td>COW</td><td>table</td><td></td><td>dog</td><td>horse</td><td>mbike</td><td>person plant</td><td></td><td>sheep</td><td>sofa</td><td>train</td><td>tv</td></tr><tr><td>baseline</td><td>VGG-16</td><td>07++12</td><td>70.4</td><td>84.9</td><td>79.8</td><td>74.3</td><td>53.9</td><td>49.8</td><td>77.5</td><td>75.9</td><td>88.5</td><td></td><td>45.6</td><td>77.1</td><td>55.3</td><td>86.9</td><td>81.7</td><td>80.9</td><td>79.6</td><td>40.1</td><td>72.6</td><td>60.9</td><td>81.2</td><td>61.5</td></tr><tr><td>baseline</td><td>ResNet-101</td><td>07++12</td><td>73.8</td><td>86.5</td><td>81.6</td><td>77.2</td><td>58.0</td><td>51.0</td><td>78.6</td><td>76.6</td><td></td><td>93.2</td><td>48.6</td><td>80.4</td><td>59.0</td><td>92.1</td><td>85.3</td><td>84.8</td><td>80.7</td><td>48.1</td><td>77.3</td><td>66.5</td><td>84.7</td><td>65.6</td></tr><tr><td>baseline+++</td><td>ResNet-101</td><td>COCO+07++12</td><td>83.8</td><td>92.1</td><td>88.4</td><td>84.8</td><td>75.9</td><td>71.4</td><td>86.3</td><td>87.8</td><td></td><td>94.2</td><td>66.8</td><td>89.4</td><td>69.2</td><td>93.9</td><td>91.9</td><td>90.9</td><td>89.6</td><td>67.9</td><td>88.2</td><td>76.8</td><td>90.3</td><td>80.0</td></tr></table>",
      "id": 156,
      "page": 11,
      "text": "system net data mAP areo bike bird boat bottle bus car cat chair COW table  dog horse mbike person plant  sheep sofa train tv\n baseline VGG-16 07++12 70.4 84.9 79.8 74.3 53.9 49.8 77.5 75.9 88.5  45.6 77.1 55.3 86.9 81.7 80.9 79.6 40.1 72.6 60.9 81.2 61.5\n baseline ResNet-101 07++12 73.8 86.5 81.6 77.2 58.0 51.0 78.6 76.6  93.2 48.6 80.4 59.0 92.1 85.3 84.8 80.7 48.1 77.3 66.5 84.7 65.6\n baseline+++ ResNet-101 COCO+07++12 83.8 92.1 88.4 84.8 75.9 71.4 86.3 87.8  94.2 66.8 89.4 69.2 93.9 91.9 90.9 89.6 67.9 88.2 76.8 90.3"
    },
    {
      "bounding_box": [
        {
          "x": 204,
          "y": 1418
        },
        {
          "x": 2274,
          "y": 1418
        },
        {
          "x": 2274,
          "y": 1553
        },
        {
          "x": 204,
          "y": 1553
        }
      ],
      "category": "caption",
      "html": "<caption id='157' style='font-size:14px'>Table 11. Detection results on the PASCAL VOC 2012 test set (http : / /host · robots · ○x. ac · uk : 8080 /leaderboard/<br>displaylb · php?challengeid=118compid=4) The baseline is the Faster R-CNN system. The system \"baseline+++\" include<br>box refinement, context, and multi-scale testing in Table 9.</caption>",
      "id": 157,
      "page": 11,
      "text": "Table 11. Detection results on the PASCAL VOC 2012 test set (http : / /host · robots · ○x. ac · uk : 8080 /leaderboard/\ndisplaylb · php?challengeid=118compid=4) The baseline is the Faster R-CNN system. The system \"baseline+++\" include\nbox refinement, context, and multi-scale testing in Table 9."
    },
    {
      "bounding_box": [
        {
          "x": 202,
          "y": 1639
        },
        {
          "x": 1198,
          "y": 1639
        },
        {
          "x": 1198,
          "y": 1884
        },
        {
          "x": 202,
          "y": 1884
        }
      ],
      "category": "paragraph",
      "html": "<p id='158' style='font-size:20px'>We select two adjacent scales from the pyramid following<br>[33]. RoI pooling and subsequent layers are performed on<br>the feature maps of these two scales [33], which are merged<br>by maxout as in [33]. Multi-scale testing improves the mAP<br>by over 2 points (Table 9).</p>",
      "id": 158,
      "page": 11,
      "text": "We select two adjacent scales from the pyramid following\n[33]. RoI pooling and subsequent layers are performed on\nthe feature maps of these two scales [33], which are merged\nby maxout as in [33]. Multi-scale testing improves the mAP\nby over 2 points (Table 9)."
    },
    {
      "bounding_box": [
        {
          "x": 202,
          "y": 1912
        },
        {
          "x": 1199,
          "y": 1912
        },
        {
          "x": 1199,
          "y": 2206
        },
        {
          "x": 202,
          "y": 2206
        }
      ],
      "category": "paragraph",
      "html": "<p id='159' style='font-size:18px'>Using validation data. Next we use the 80k+40k trainval set<br>for training and the 20k test-dev set for evaluation. The test-<br>dev set has no publicly available ground truth and the result<br>is reported by the evaluation server. Under this setting, the<br>results are an mAP@.5 of 55.7% and an mAP@[.5, .95] of<br>34.9% (Table 9). This is our single-model result.</p>",
      "id": 159,
      "page": 11,
      "text": "Using validation data. Next we use the 80k+40k trainval set\nfor training and the 20k test-dev set for evaluation. The test-\ndev set has no publicly available ground truth and the result\nis reported by the evaluation server. Under this setting, the\nresults are an mAP@.5 of 55.7% and an mAP@[.5, .95] of\n34.9% (Table 9). This is our single-model result."
    },
    {
      "bounding_box": [
        {
          "x": 201,
          "y": 2234
        },
        {
          "x": 1199,
          "y": 2234
        },
        {
          "x": 1199,
          "y": 2629
        },
        {
          "x": 201,
          "y": 2629
        }
      ],
      "category": "paragraph",
      "html": "<p id='160' style='font-size:18px'>Ensemble. In Faster R-CNN, the system is designed to learn<br>region proposals and also object classifiers, SO an ensemble<br>can be used to boost both tasks. We use an ensemble for<br>proposing regions, and the union set of proposals are pro-<br>cessed by an ensemble of per-region classifiers. Table 9<br>shows our result based on an ensemble of 3 networks. The<br>mAP is 59.0% and 37.4% on the test-dev set. This result<br>won the 1st place in the detection task in COCO 2015.</p>",
      "id": 160,
      "page": 11,
      "text": "Ensemble. In Faster R-CNN, the system is designed to learn\nregion proposals and also object classifiers, SO an ensemble\ncan be used to boost both tasks. We use an ensemble for\nproposing regions, and the union set of proposals are pro-\ncessed by an ensemble of per-region classifiers. Table 9\nshows our result based on an ensemble of 3 networks. The\nmAP is 59.0% and 37.4% on the test-dev set. This result\nwon the 1st place in the detection task in COCO 2015."
    },
    {
      "bounding_box": [
        {
          "x": 204,
          "y": 2675
        },
        {
          "x": 476,
          "y": 2675
        },
        {
          "x": 476,
          "y": 2719
        },
        {
          "x": 204,
          "y": 2719
        }
      ],
      "category": "paragraph",
      "html": "<p id='161' style='font-size:20px'>PASCAL VOC</p>",
      "id": 161,
      "page": 11,
      "text": "PASCAL VOC"
    },
    {
      "bounding_box": [
        {
          "x": 203,
          "y": 2729
        },
        {
          "x": 1198,
          "y": 2729
        },
        {
          "x": 1198,
          "y": 2976
        },
        {
          "x": 203,
          "y": 2976
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='162' style='font-size:18px'>We revisit the PASCAL VOC dataset based on the above<br>model. With the single model on the COCO dataset (55.7%<br>mAP@.5 in Table 9), we fine-tune this model on the PAS-<br>CAL VOC sets. The improvements of box refinement, con-<br>text, and multi-scale testing are also adopted. By doing SO</p>",
      "id": 162,
      "page": 11,
      "text": "We revisit the PASCAL VOC dataset based on the above\nmodel. With the single model on the COCO dataset (55.7%\nmAP@.5 in Table 9), we fine-tune this model on the PAS-\nCAL VOC sets. The improvements of box refinement, con-\ntext, and multi-scale testing are also adopted. By doing SO"
    },
    {
      "bounding_box": [
        {
          "x": 1345,
          "y": 1624
        },
        {
          "x": 2210,
          "y": 1624
        },
        {
          "x": 2210,
          "y": 1859
        },
        {
          "x": 1345,
          "y": 1859
        }
      ],
      "category": "table",
      "html": "<br><table id='163' style='font-size:16px'><tr><td></td><td>val2</td><td>test</td></tr><tr><td>GoogLeNet [44] (ILSVRC'14)</td><td>-</td><td>43.9</td></tr><tr><td>our single model (ILSVRC'15)</td><td>60.5</td><td>58.8</td></tr><tr><td>our ensemble (ILSVRC'15)</td><td>63.6</td><td>62.1</td></tr></table>",
      "id": 163,
      "page": 11,
      "text": "val2 test\n GoogLeNet [44] (ILSVRC'14) - 43.9\n our single model (ILSVRC'15) 60.5 58.8\n our ensemble (ILSVRC'15) 63.6"
    },
    {
      "bounding_box": [
        {
          "x": 1282,
          "y": 1878
        },
        {
          "x": 2274,
          "y": 1878
        },
        {
          "x": 2274,
          "y": 2008
        },
        {
          "x": 1282,
          "y": 2008
        }
      ],
      "category": "caption",
      "html": "<br><caption id='164' style='font-size:16px'>Table 12. Our results (mAP, %) on the ImageNet detection dataset.<br>Our detection system is Faster R-CNN [32] with the improvements<br>in Table 9, using ResNet-101.</caption>",
      "id": 164,
      "page": 11,
      "text": "Table 12. Our results (mAP, %) on the ImageNet detection dataset.\nOur detection system is Faster R-CNN [32] with the improvements\nin Table 9, using ResNet-101."
    },
    {
      "bounding_box": [
        {
          "x": 1280,
          "y": 2078
        },
        {
          "x": 2276,
          "y": 2078
        },
        {
          "x": 2276,
          "y": 2272
        },
        {
          "x": 1280,
          "y": 2272
        }
      ],
      "category": "paragraph",
      "html": "<p id='165' style='font-size:18px'>we achieve 85.6% mAP on PASCAL VOC 2007 (Table 10)<br>and 83.8% on PASCAL VOC 2012 (Table 11)6. The result<br>on PASCAL VOC 2012 is 10 points higher than the previ-<br>ous state-of-the-art result [6].</p>",
      "id": 165,
      "page": 11,
      "text": "we achieve 85.6% mAP on PASCAL VOC 2007 (Table 10)\nand 83.8% on PASCAL VOC 2012 (Table 11)6. The result\non PASCAL VOC 2012 is 10 points higher than the previ-\nous state-of-the-art result [6]."
    },
    {
      "bounding_box": [
        {
          "x": 1281,
          "y": 2319
        },
        {
          "x": 1642,
          "y": 2319
        },
        {
          "x": 1642,
          "y": 2361
        },
        {
          "x": 1281,
          "y": 2361
        }
      ],
      "category": "paragraph",
      "html": "<p id='166' style='font-size:22px'>ImageNet Detection</p>",
      "id": 166,
      "page": 11,
      "text": "ImageNet Detection"
    },
    {
      "bounding_box": [
        {
          "x": 1279,
          "y": 2370
        },
        {
          "x": 2277,
          "y": 2370
        },
        {
          "x": 2277,
          "y": 2863
        },
        {
          "x": 1279,
          "y": 2863
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='167' style='font-size:18px'>The ImageNet Detection (DET) task involves 200 object<br>categories. The accuracy is evaluated by mAP@.5. Our<br>object detection algorithm for ImageNet DET is the same<br>as that for MS COCO in Table 9. The networks are pre-<br>trained on the 1000-class ImageNet classification set, and<br>are fine-tuned on the DET data. We split the validation set<br>into two parts (val1/val2) following [8]. We fine-tune the<br>detection models using the DET training set and the vall<br>set. The val2 set is used for validation. We do not use other<br>ILSVRC 2015 data. Our single model with ResNet-101 has</p>",
      "id": 167,
      "page": 11,
      "text": "The ImageNet Detection (DET) task involves 200 object\ncategories. The accuracy is evaluated by mAP@.5. Our\nobject detection algorithm for ImageNet DET is the same\nas that for MS COCO in Table 9. The networks are pre-\ntrained on the 1000-class ImageNet classification set, and\nare fine-tuned on the DET data. We split the validation set\ninto two parts (val1/val2) following [8]. We fine-tune the\ndetection models using the DET training set and the vall\nset. The val2 set is used for validation. We do not use other\nILSVRC 2015 data. Our single model with ResNet-101 has"
    },
    {
      "bounding_box": [
        {
          "x": 1282,
          "y": 2903
        },
        {
          "x": 2233,
          "y": 2903
        },
        {
          "x": 2233,
          "y": 2968
        },
        {
          "x": 1282,
          "y": 2968
        }
      ],
      "category": "paragraph",
      "html": "<p id='168' style='font-size:14px'>6http: / /host . robots. oz.ao.uk/8080/enomymous/200400.htmL<br>submitted on 2015-11-26.</p>",
      "id": 168,
      "page": 11,
      "text": "6http: / /host . robots. oz.ao.uk/8080/enomymous/200400.htmL\nsubmitted on 2015-11-26."
    },
    {
      "bounding_box": [
        {
          "x": 1218,
          "y": 3053
        },
        {
          "x": 1260,
          "y": 3053
        },
        {
          "x": 1260,
          "y": 3094
        },
        {
          "x": 1218,
          "y": 3094
        }
      ],
      "category": "footer",
      "html": "<footer id='169' style='font-size:18px'>11</footer>",
      "id": 169,
      "page": 11,
      "text": "11"
    },
    {
      "bounding_box": [
        {
          "x": 209,
          "y": 296
        },
        {
          "x": 1192,
          "y": 296
        },
        {
          "x": 1192,
          "y": 619
        },
        {
          "x": 209,
          "y": 619
        }
      ],
      "category": "table",
      "html": "<table id='170' style='font-size:14px'><tr><td>LOC method</td><td>LOC network</td><td>testing</td><td>LOC error on GT CLS</td><td>classification network</td><td>top-5 LOC error on predicted CLS</td></tr><tr><td>VGG's [41]</td><td>VGG-16</td><td>1-crop</td><td>33.1 [41]</td><td></td><td></td></tr><tr><td>RPN</td><td>ResNet-101</td><td>1-crop</td><td>13.3</td><td></td><td></td></tr><tr><td>RPN</td><td>ResNet-101</td><td>dense</td><td>11.7</td><td></td><td></td></tr><tr><td>RPN</td><td>ResNet-101</td><td>dense</td><td></td><td>ResNet-101</td><td>14.4</td></tr><tr><td>RPN+RCNN</td><td>ResNet-101</td><td>dense</td><td></td><td>ResNet-101</td><td>10.6</td></tr><tr><td>RPN+RCNN</td><td>ensemble</td><td>dense</td><td></td><td>ensemble</td><td>8.9</td></tr></table>",
      "id": 170,
      "page": 12,
      "text": "LOC method LOC network testing LOC error on GT CLS classification network top-5 LOC error on predicted CLS\n VGG's [41] VGG-16 1-crop 33.1 [41]  \n RPN ResNet-101 1-crop 13.3  \n RPN ResNet-101 dense 11.7  \n RPN ResNet-101 dense  ResNet-101 14.4\n RPN+RCNN ResNet-101 dense  ResNet-101 10.6\n RPN+RCNN ensemble dense  ensemble"
    },
    {
      "bounding_box": [
        {
          "x": 203,
          "y": 634
        },
        {
          "x": 1199,
          "y": 634
        },
        {
          "x": 1199,
          "y": 859
        },
        {
          "x": 203,
          "y": 859
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='171' style='font-size:14px'>Table 13. Localization error (%) on the ImageNet validation. In<br>the column of \"LOC error on GT class\" ([41]), the ground truth<br>class is used. In the \"testing\" column, \"1-crop\" denotes testing<br>on a center crop of 224x 224 pixels, \"dense\" denotes dense (fully<br>convolutional) and multi-scale testing.</p>",
      "id": 171,
      "page": 12,
      "text": "Table 13. Localization error (%) on the ImageNet validation. In\nthe column of \"LOC error on GT class\" ([41]), the ground truth\nclass is used. In the \"testing\" column, \"1-crop\" denotes testing\non a center crop of 224x 224 pixels, \"dense\" denotes dense (fully\nconvolutional) and multi-scale testing."
    },
    {
      "bounding_box": [
        {
          "x": 202,
          "y": 932
        },
        {
          "x": 1198,
          "y": 932
        },
        {
          "x": 1198,
          "y": 1128
        },
        {
          "x": 202,
          "y": 1128
        }
      ],
      "category": "paragraph",
      "html": "<p id='172' style='font-size:18px'>58.8% mAP and our ensemble of 3 models has 62.1% mAP<br>on the DET test set (Table 12). This result won the 1st place<br>in the ImageNet detection task in ILSVRC 2015, surpassing<br>the second place by 8.5 points (absolute).</p>",
      "id": 172,
      "page": 12,
      "text": "58.8% mAP and our ensemble of 3 models has 62.1% mAP\non the DET test set (Table 12). This result won the 1st place\nin the ImageNet detection task in ILSVRC 2015, surpassing\nthe second place by 8.5 points (absolute)."
    },
    {
      "bounding_box": [
        {
          "x": 205,
          "y": 1186
        },
        {
          "x": 755,
          "y": 1186
        },
        {
          "x": 755,
          "y": 1237
        },
        {
          "x": 205,
          "y": 1237
        }
      ],
      "category": "paragraph",
      "html": "<p id='173' style='font-size:22px'>C. ImageNet Localization</p>",
      "id": 173,
      "page": 12,
      "text": "C. ImageNet Localization"
    },
    {
      "bounding_box": [
        {
          "x": 201,
          "y": 1271
        },
        {
          "x": 1198,
          "y": 1271
        },
        {
          "x": 1198,
          "y": 1820
        },
        {
          "x": 201,
          "y": 1820
        }
      ],
      "category": "paragraph",
      "html": "<p id='174' style='font-size:20px'>The ImageNet Localization (LOC) task [36] requires to<br>classify and localize the objects. Following [40, 41], we<br>assume that the image-level classifiers are first adopted for<br>predicting the class labels of an image, and the localiza-<br>tion algorithm only accounts for predicting bounding boxes<br>based on the predicted classes. We adopt the \"per-class re-<br>gression\" (PCR) strategy [40, 41], learning a bounding box<br>regressor for each class. We pre-train the networks for Im-<br>ageNet classification and then fine-tune them for localiza-<br>tion. We train networks on the provided 1000-class Ima-<br>geNet training set.</p>",
      "id": 174,
      "page": 12,
      "text": "The ImageNet Localization (LOC) task [36] requires to\nclassify and localize the objects. Following [40, 41], we\nassume that the image-level classifiers are first adopted for\npredicting the class labels of an image, and the localiza-\ntion algorithm only accounts for predicting bounding boxes\nbased on the predicted classes. We adopt the \"per-class re-\ngression\" (PCR) strategy [40, 41], learning a bounding box\nregressor for each class. We pre-train the networks for Im-\nageNet classification and then fine-tune them for localiza-\ntion. We train networks on the provided 1000-class Ima-\ngeNet training set."
    },
    {
      "bounding_box": [
        {
          "x": 200,
          "y": 1828
        },
        {
          "x": 1198,
          "y": 1828
        },
        {
          "x": 1198,
          "y": 2469
        },
        {
          "x": 200,
          "y": 2469
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='175' style='font-size:20px'>Our localization algorithm is based on the RPN frame-<br>work of [32] with a few modifications. Unlike the way in<br>[32] that is category-agnostic, our RPN for localization is<br>designed in a per-class form. This RPN ends with two sib-<br>ling 1 x 1 convolutional layers for binary classification (cls)<br>and box regression (reg), as in [32]. The cls and reg layers<br>are both in a per-class from, in contrast to [32]. Specifi-<br>cally, the cls layer has a 1000-d output, and each dimension<br>is binary logistic regression for predicting being or not be-<br>ing an object class; the reg layer has a 1000x4-d output<br>consisting of box regressors for 1000 classes. As in [32],<br>our bounding box regression is with reference to multiple<br>translation-invariant \"anchor\" boxes at each position.</p>",
      "id": 175,
      "page": 12,
      "text": "Our localization algorithm is based on the RPN frame-\nwork of [32] with a few modifications. Unlike the way in\n[32] that is category-agnostic, our RPN for localization is\ndesigned in a per-class form. This RPN ends with two sib-\nling 1 x 1 convolutional layers for binary classification (cls)\nand box regression (reg), as in [32]. The cls and reg layers\nare both in a per-class from, in contrast to [32]. Specifi-\ncally, the cls layer has a 1000-d output, and each dimension\nis binary logistic regression for predicting being or not be-\ning an object class; the reg layer has a 1000x4-d output\nconsisting of box regressors for 1000 classes. As in [32],\nour bounding box regression is with reference to multiple\ntranslation-invariant \"anchor\" boxes at each position."
    },
    {
      "bounding_box": [
        {
          "x": 202,
          "y": 2476
        },
        {
          "x": 1198,
          "y": 2476
        },
        {
          "x": 1198,
          "y": 2822
        },
        {
          "x": 202,
          "y": 2822
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='176' style='font-size:20px'>As in our ImageNet classification training (Sec. 3.4), we<br>randomly sample 224x224 crops for data augmentation.<br>We use a mini-batch size of 256 images for fine-tuning. To<br>avoid negative samples being dominate, 8 anchors are ran-<br>domly sampled for each image, where the sampled positive<br>and negative anchors have a ratio of 1:1 [32]. For testing,<br>the network is applied on the image fully-convolutionally.</p>",
      "id": 176,
      "page": 12,
      "text": "As in our ImageNet classification training (Sec. 3.4), we\nrandomly sample 224x224 crops for data augmentation.\nWe use a mini-batch size of 256 images for fine-tuning. To\navoid negative samples being dominate, 8 anchors are ran-\ndomly sampled for each image, where the sampled positive\nand negative anchors have a ratio of 1:1 [32]. For testing,\nthe network is applied on the image fully-convolutionally."
    },
    {
      "bounding_box": [
        {
          "x": 204,
          "y": 2829
        },
        {
          "x": 1199,
          "y": 2829
        },
        {
          "x": 1199,
          "y": 2975
        },
        {
          "x": 204,
          "y": 2975
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='177' style='font-size:20px'>Table 13 compares the localization results. Following<br>[41], we first perform \"oracle\" testing using the ground truth<br>class as the classification prediction. VGG's paper [41] re-</p>",
      "id": 177,
      "page": 12,
      "text": "Table 13 compares the localization results. Following\n[41], we first perform \"oracle\" testing using the ground truth\nclass as the classification prediction. VGG's paper [41] re-"
    },
    {
      "bounding_box": [
        {
          "x": 1296,
          "y": 293
        },
        {
          "x": 2259,
          "y": 293
        },
        {
          "x": 2259,
          "y": 600
        },
        {
          "x": 1296,
          "y": 600
        }
      ],
      "category": "table",
      "html": "<br><table id='178' style='font-size:14px'><tr><td rowspan=\"2\">method</td><td colspan=\"2\">top-5 localization err</td></tr><tr><td>val</td><td>test</td></tr><tr><td>OverFeat [40] (ILSVRC'13)</td><td>30.0</td><td>29.9</td></tr><tr><td>GoogLeNet [44] (ILSVRC'14)</td><td>-</td><td>26.7</td></tr><tr><td>VGG [41] (ILSVRC'14)</td><td>26.9</td><td>25.3</td></tr><tr><td>ours (ILSVRC'15)</td><td>8.9</td><td>9.0</td></tr></table>",
      "id": 178,
      "page": 12,
      "text": "method top-5 localization err\n val test\n OverFeat [40] (ILSVRC'13) 30.0 29.9\n GoogLeNet [44] (ILSVRC'14) - 26.7\n VGG [41] (ILSVRC'14) 26.9 25.3\n ours (ILSVRC'15) 8.9"
    },
    {
      "bounding_box": [
        {
          "x": 1284,
          "y": 615
        },
        {
          "x": 2272,
          "y": 615
        },
        {
          "x": 2272,
          "y": 698
        },
        {
          "x": 1284,
          "y": 698
        }
      ],
      "category": "caption",
      "html": "<br><caption id='179' style='font-size:16px'>Table 14. Comparisons of localization error (%) on the ImageNet<br>dataset with state-of-the-art methods.</caption>",
      "id": 179,
      "page": 12,
      "text": "Table 14. Comparisons of localization error (%) on the ImageNet\ndataset with state-of-the-art methods."
    },
    {
      "bounding_box": [
        {
          "x": 1280,
          "y": 763
        },
        {
          "x": 2276,
          "y": 763
        },
        {
          "x": 2276,
          "y": 1202
        },
        {
          "x": 1280,
          "y": 1202
        }
      ],
      "category": "paragraph",
      "html": "<p id='180' style='font-size:18px'>ports a center-crop error of 33.1% (Table 13) using ground<br>truth classes. Under the same setting, our RPN method us-<br>ing ResNet-101 net significantly reduces the center-crop er-<br>ror to 13.3%. This comparison demonstrates the excellent<br>performance of our framework. With dense (fully convolu-<br>tional) and multi-scale testing, our ResNet-101 has an error<br>of 11.7% using ground truth classes. Using ResNet-101 for<br>predicting classes (4.6% top-5 classification error, Table 4),<br>the top-5 localization error is 14.4%.</p>",
      "id": 180,
      "page": 12,
      "text": "ports a center-crop error of 33.1% (Table 13) using ground\ntruth classes. Under the same setting, our RPN method us-\ning ResNet-101 net significantly reduces the center-crop er-\nror to 13.3%. This comparison demonstrates the excellent\nperformance of our framework. With dense (fully convolu-\ntional) and multi-scale testing, our ResNet-101 has an error\nof 11.7% using ground truth classes. Using ResNet-101 for\npredicting classes (4.6% top-5 classification error, Table 4),\nthe top-5 localization error is 14.4%."
    },
    {
      "bounding_box": [
        {
          "x": 1279,
          "y": 1210
        },
        {
          "x": 2275,
          "y": 1210
        },
        {
          "x": 2275,
          "y": 1752
        },
        {
          "x": 1279,
          "y": 1752
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='181' style='font-size:20px'>The above results are only based on the proposal network<br>(RPN) in Faster R-CNN [32]. One may use the detection<br>network (Fast R-CNN [7]) in Faster R-CNN to improve the<br>results. But we notice that on this dataset, one image usually<br>contains a single dominate object, and the proposal regions<br>highly overlap with each other and thus have very similar<br>RoI-pooled features. As a result, the image-centric training<br>of Fast R-CNN [7] generates samples of small variations,<br>which may not be desired for stochastic training. Motivated<br>by this, in our current experiment we use the original R-<br>CNN [8] that is RoI-centric, in place of Fast R-CNN.</p>",
      "id": 181,
      "page": 12,
      "text": "The above results are only based on the proposal network\n(RPN) in Faster R-CNN [32]. One may use the detection\nnetwork (Fast R-CNN [7]) in Faster R-CNN to improve the\nresults. But we notice that on this dataset, one image usually\ncontains a single dominate object, and the proposal regions\nhighly overlap with each other and thus have very similar\nRoI-pooled features. As a result, the image-centric training\nof Fast R-CNN [7] generates samples of small variations,\nwhich may not be desired for stochastic training. Motivated\nby this, in our current experiment we use the original R-\nCNN [8] that is RoI-centric, in place of Fast R-CNN."
    },
    {
      "bounding_box": [
        {
          "x": 1278,
          "y": 1758
        },
        {
          "x": 2277,
          "y": 1758
        },
        {
          "x": 2277,
          "y": 2501
        },
        {
          "x": 1278,
          "y": 2501
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='182' style='font-size:18px'>Our R-CNN implementation is as follows. We apply the<br>per-class RPN trained as above on the training images to<br>predict bounding boxes for the ground truth class. These<br>predicted boxes play a role of class-dependent proposals.<br>For each training image, the highest scored 200 proposals<br>are extracted as training samples to train an R-CNN classi-<br>fier. The image region is cropped from a proposal, warped<br>to 224x 224 pixels, and fed into the classification network<br>as in R-CNN [8]. The outputs of this network consist of two<br>sibling fc layers for cls and reg, also in a per-class form.<br>This R-CNN network is fine-tuned on the training set us-<br>ing a mini-batch size of 256 in the RoI-centric fashion. For<br>testing, the RPN generates the highest scored 200 proposals<br>for each predicted class, and the R-CNN network is used to<br>update these proposals' scores and box positions.</p>",
      "id": 182,
      "page": 12,
      "text": "Our R-CNN implementation is as follows. We apply the\nper-class RPN trained as above on the training images to\npredict bounding boxes for the ground truth class. These\npredicted boxes play a role of class-dependent proposals.\nFor each training image, the highest scored 200 proposals\nare extracted as training samples to train an R-CNN classi-\nfier. The image region is cropped from a proposal, warped\nto 224x 224 pixels, and fed into the classification network\nas in R-CNN [8]. The outputs of this network consist of two\nsibling fc layers for cls and reg, also in a per-class form.\nThis R-CNN network is fine-tuned on the training set us-\ning a mini-batch size of 256 in the RoI-centric fashion. For\ntesting, the RPN generates the highest scored 200 proposals\nfor each predicted class, and the R-CNN network is used to\nupdate these proposals' scores and box positions."
    },
    {
      "bounding_box": [
        {
          "x": 1280,
          "y": 2505
        },
        {
          "x": 2277,
          "y": 2505
        },
        {
          "x": 2277,
          "y": 2900
        },
        {
          "x": 1280,
          "y": 2900
        }
      ],
      "category": "paragraph",
      "html": "<br><p id='183' style='font-size:16px'>This method reduces the top-5 localization error to<br>10.6% (Table 13). This is our single-model result on the<br>validation set. Using an ensemble of networks for both clas-<br>sification and localization, we achieve a top-5 localization<br>error of 9.0% on the test set. This number significantly out-<br>performs the ILSVRC 14 results (Table 14), showing a 64%<br>relative reduction of error. This result won the 1st place in<br>the ImageNet localization task in ILSVRC 2015.</p>",
      "id": 183,
      "page": 12,
      "text": "This method reduces the top-5 localization error to\n10.6% (Table 13). This is our single-model result on the\nvalidation set. Using an ensemble of networks for both clas-\nsification and localization, we achieve a top-5 localization\nerror of 9.0% on the test set. This number significantly out-\nperforms the ILSVRC 14 results (Table 14), showing a 64%\nrelative reduction of error. This result won the 1st place in\nthe ImageNet localization task in ILSVRC 2015."
    },
    {
      "bounding_box": [
        {
          "x": 1218,
          "y": 3052
        },
        {
          "x": 1263,
          "y": 3052
        },
        {
          "x": 1263,
          "y": 3094
        },
        {
          "x": 1218,
          "y": 3094
        }
      ],
      "category": "footer",
      "html": "<footer id='184' style='font-size:18px'>12</footer>",
      "id": 184,
      "page": 12,
      "text": "12"
    }
  ]
}